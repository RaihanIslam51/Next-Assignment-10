(globalThis.TURBOPACK || (globalThis.TURBOPACK = [])).push([typeof document === "object" ? document.currentScript : undefined,
"[project]/node_modules/mongodb/lib/sdam/common.js [app-client] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;
exports._advanceClusterTime = _advanceClusterTime;
// shared state names
exports.STATE_CLOSING = 'closing';
exports.STATE_CLOSED = 'closed';
exports.STATE_CONNECTING = 'connecting';
exports.STATE_CONNECTED = 'connected';
/**
 * An enumeration of topology types we know about
 * @public
 */ exports.TopologyType = Object.freeze({
    Single: 'Single',
    ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',
    ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',
    Sharded: 'Sharded',
    Unknown: 'Unknown',
    LoadBalanced: 'LoadBalanced'
});
/**
 * An enumeration of server types we know about
 * @public
 */ exports.ServerType = Object.freeze({
    Standalone: 'Standalone',
    Mongos: 'Mongos',
    PossiblePrimary: 'PossiblePrimary',
    RSPrimary: 'RSPrimary',
    RSSecondary: 'RSSecondary',
    RSArbiter: 'RSArbiter',
    RSOther: 'RSOther',
    RSGhost: 'RSGhost',
    Unknown: 'Unknown',
    LoadBalancer: 'LoadBalancer'
});
/** Shared function to determine clusterTime for a given topology or session */ function _advanceClusterTime(entity, $clusterTime) {
    if (entity.clusterTime == null) {
        entity.clusterTime = $clusterTime;
    } else {
        if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {
            entity.clusterTime = $clusterTime;
        }
    }
} //# sourceMappingURL=common.js.map
}),
"[project]/node_modules/mongodb/lib/sdam/server_selection.js [app-client] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MIN_SECONDARY_WRITE_WIRE_VERSION = void 0;
exports.writableServerSelector = writableServerSelector;
exports.sameServerSelector = sameServerSelector;
exports.secondaryWritableServerSelector = secondaryWritableServerSelector;
exports.readPreferenceServerSelector = readPreferenceServerSelector;
const error_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/error.js [app-client] (ecmascript)");
const read_preference_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/read_preference.js [app-client] (ecmascript)");
const common_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/common.js [app-client] (ecmascript)");
// max staleness constants
const IDLE_WRITE_PERIOD = 10000;
const SMALLEST_MAX_STALENESS_SECONDS = 90;
//  Minimum version to try writes on secondaries.
exports.MIN_SECONDARY_WRITE_WIRE_VERSION = 13;
/**
 * Returns a server selector that selects for writable servers
 */ function writableServerSelector() {
    return function writableServer(topologyDescription, servers) {
        return latencyWindowReducer(topologyDescription, servers.filter((s)=>s.isWritable));
    };
}
/**
 * The purpose of this selector is to select the same server, only
 * if it is in a state that it can have commands sent to it.
 */ function sameServerSelector(description) {
    return function sameServerSelector(topologyDescription, servers) {
        if (!description) return [];
        // Filter the servers to match the provided description only if
        // the type is not unknown.
        return servers.filter((sd)=>{
            return sd.address === description.address && sd.type !== common_1.ServerType.Unknown;
        });
    };
}
/**
 * Returns a server selector that uses a read preference to select a
 * server potentially for a write on a secondary.
 */ function secondaryWritableServerSelector(wireVersion, readPreference) {
    // If server version < 5.0, read preference always primary.
    // If server version >= 5.0...
    // - If read preference is supplied, use that.
    // - If no read preference is supplied, use primary.
    if (!readPreference || !wireVersion || wireVersion && wireVersion < exports.MIN_SECONDARY_WRITE_WIRE_VERSION) {
        return readPreferenceServerSelector(read_preference_1.ReadPreference.primary);
    }
    return readPreferenceServerSelector(readPreference);
}
/**
 * Reduces the passed in array of servers by the rules of the "Max Staleness" specification
 * found here:
 *
 * @see https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.md
 *
 * @param readPreference - The read preference providing max staleness guidance
 * @param topologyDescription - The topology description
 * @param servers - The list of server descriptions to be reduced
 * @returns The list of servers that satisfy the requirements of max staleness
 */ function maxStalenessReducer(readPreference, topologyDescription, servers) {
    if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {
        return servers;
    }
    const maxStaleness = readPreference.maxStalenessSeconds;
    const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;
    if (maxStaleness < maxStalenessVariance) {
        throw new error_1.MongoInvalidArgumentError('Option "maxStalenessSeconds" must be at least '.concat(maxStalenessVariance, " seconds"));
    }
    if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {
        throw new error_1.MongoInvalidArgumentError('Option "maxStalenessSeconds" must be at least '.concat(SMALLEST_MAX_STALENESS_SECONDS, " seconds"));
    }
    if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {
        const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];
        return servers.reduce((result, server)=>{
            const stalenessMS = server.lastUpdateTime - server.lastWriteDate - (primary.lastUpdateTime - primary.lastWriteDate) + topologyDescription.heartbeatFrequencyMS;
            const staleness = stalenessMS / 1000;
            var _readPreference_maxStalenessSeconds;
            const maxStalenessSeconds = (_readPreference_maxStalenessSeconds = readPreference.maxStalenessSeconds) !== null && _readPreference_maxStalenessSeconds !== void 0 ? _readPreference_maxStalenessSeconds : 0;
            if (staleness <= maxStalenessSeconds) {
                result.push(server);
            }
            return result;
        }, []);
    }
    if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {
        if (servers.length === 0) {
            return servers;
        }
        const sMax = servers.reduce((max, s)=>s.lastWriteDate > max.lastWriteDate ? s : max);
        return servers.reduce((result, server)=>{
            const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;
            const staleness = stalenessMS / 1000;
            var _readPreference_maxStalenessSeconds;
            const maxStalenessSeconds = (_readPreference_maxStalenessSeconds = readPreference.maxStalenessSeconds) !== null && _readPreference_maxStalenessSeconds !== void 0 ? _readPreference_maxStalenessSeconds : 0;
            if (staleness <= maxStalenessSeconds) {
                result.push(server);
            }
            return result;
        }, []);
    }
    return servers;
}
/**
 * Determines whether a server's tags match a given set of tags
 *
 * @param tagSet - The requested tag set to match
 * @param serverTags - The server's tags
 */ function tagSetMatch(tagSet, serverTags) {
    const keys = Object.keys(tagSet);
    const serverTagKeys = Object.keys(serverTags);
    for(let i = 0; i < keys.length; ++i){
        const key = keys[i];
        if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {
            return false;
        }
    }
    return true;
}
/**
 * Reduces a set of server descriptions based on tags requested by the read preference
 *
 * @param readPreference - The read preference providing the requested tags
 * @param servers - The list of server descriptions to reduce
 * @returns The list of servers matching the requested tags
 */ function tagSetReducer(readPreference, servers) {
    if (readPreference.tags == null || Array.isArray(readPreference.tags) && readPreference.tags.length === 0) {
        return servers;
    }
    for(let i = 0; i < readPreference.tags.length; ++i){
        const tagSet = readPreference.tags[i];
        const serversMatchingTagset = servers.reduce((matched, server)=>{
            if (tagSetMatch(tagSet, server.tags)) matched.push(server);
            return matched;
        }, []);
        if (serversMatchingTagset.length) {
            return serversMatchingTagset;
        }
    }
    return [];
}
/**
 * Reduces a list of servers to ensure they fall within an acceptable latency window. This is
 * further specified in the "Server Selection" specification, found here:
 *
 * @see https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.md
 *
 * @param topologyDescription - The topology description
 * @param servers - The list of servers to reduce
 * @returns The servers which fall within an acceptable latency window
 */ function latencyWindowReducer(topologyDescription, servers) {
    const low = servers.reduce((min, server)=>Math.min(server.roundTripTime, min), Infinity);
    const high = low + topologyDescription.localThresholdMS;
    return servers.reduce((result, server)=>{
        if (server.roundTripTime <= high && server.roundTripTime >= low) result.push(server);
        return result;
    }, []);
}
// filters
function primaryFilter(server) {
    return server.type === common_1.ServerType.RSPrimary;
}
function secondaryFilter(server) {
    return server.type === common_1.ServerType.RSSecondary;
}
function nearestFilter(server) {
    return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;
}
function knownFilter(server) {
    return server.type !== common_1.ServerType.Unknown;
}
function loadBalancerFilter(server) {
    return server.type === common_1.ServerType.LoadBalancer;
}
/**
 * Returns a function which selects servers based on a provided read preference
 *
 * @param readPreference - The read preference to select with
 */ function readPreferenceServerSelector(readPreference) {
    if (!readPreference.isValid()) {
        throw new error_1.MongoInvalidArgumentError('Invalid read preference specified');
    }
    return function readPreferenceServers(topologyDescription, servers) {
        let deprioritized = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
        const commonWireVersion = topologyDescription.commonWireVersion;
        if (commonWireVersion && readPreference.minWireVersion && readPreference.minWireVersion > commonWireVersion) {
            throw new error_1.MongoCompatibilityError("Minimum wire version '".concat(readPreference.minWireVersion, "' required, but found '").concat(commonWireVersion, "'"));
        }
        if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {
            return servers.filter(loadBalancerFilter);
        }
        if (topologyDescription.type === common_1.TopologyType.Unknown) {
            return [];
        }
        if (topologyDescription.type === common_1.TopologyType.Single) {
            return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));
        }
        if (topologyDescription.type === common_1.TopologyType.Sharded) {
            const filtered = servers.filter((server)=>{
                return !deprioritized.includes(server);
            });
            const selectable = filtered.length > 0 ? filtered : deprioritized;
            return latencyWindowReducer(topologyDescription, selectable.filter(knownFilter));
        }
        const mode = readPreference.mode;
        if (mode === read_preference_1.ReadPreference.PRIMARY) {
            return servers.filter(primaryFilter);
        }
        if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {
            const result = servers.filter(primaryFilter);
            if (result.length) {
                return result;
            }
        }
        const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;
        const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));
        if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {
            return servers.filter(primaryFilter);
        }
        return selectedServers;
    };
} //# sourceMappingURL=server_selection.js.map
}),
"[project]/node_modules/mongodb/lib/sdam/server_description.js [app-client] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServerDescription = void 0;
exports.parseServerType = parseServerType;
exports.compareTopologyVersion = compareTopologyVersion;
const bson_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/bson.js [app-client] (ecmascript)");
const error_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/error.js [app-client] (ecmascript)");
const utils_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/utils.js [app-client] (ecmascript)");
const common_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/common.js [app-client] (ecmascript)");
const WRITABLE_SERVER_TYPES = new Set([
    common_1.ServerType.RSPrimary,
    common_1.ServerType.Standalone,
    common_1.ServerType.Mongos,
    common_1.ServerType.LoadBalancer
]);
const DATA_BEARING_SERVER_TYPES = new Set([
    common_1.ServerType.RSPrimary,
    common_1.ServerType.RSSecondary,
    common_1.ServerType.Mongos,
    common_1.ServerType.Standalone,
    common_1.ServerType.LoadBalancer
]);
/**
 * The client's view of a single server, based on the most recent hello outcome.
 *
 * Internal type, not meant to be directly instantiated
 * @public
 */ class ServerDescription {
    get hostAddress() {
        return utils_1.HostAddress.fromString(this.address);
    }
    get allHosts() {
        return this.hosts.concat(this.arbiters).concat(this.passives);
    }
    /** Is this server available for reads*/ get isReadable() {
        return this.type === common_1.ServerType.RSSecondary || this.isWritable;
    }
    /** Is this server data bearing */ get isDataBearing() {
        return DATA_BEARING_SERVER_TYPES.has(this.type);
    }
    /** Is this server available for writes */ get isWritable() {
        return WRITABLE_SERVER_TYPES.has(this.type);
    }
    get host() {
        const chopLength = ":".concat(this.port).length;
        return this.address.slice(0, -chopLength);
    }
    get port() {
        const port = this.address.split(':').pop();
        return port ? Number.parseInt(port, 10) : 27017;
    }
    /**
     * Determines if another `ServerDescription` is equal to this one per the rules defined in the SDAM specification.
     * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md
     */ equals(other) {
        // Despite using the comparator that would determine a nullish topologyVersion as greater than
        // for equality we should only always perform direct equality comparison
        const topologyVersionsEqual = this.topologyVersion === (other === null || other === void 0 ? void 0 : other.topologyVersion) || compareTopologyVersion(this.topologyVersion, other === null || other === void 0 ? void 0 : other.topologyVersion) === 0;
        const electionIdsEqual = this.electionId != null && (other === null || other === void 0 ? void 0 : other.electionId) != null ? (0, utils_1.compareObjectId)(this.electionId, other.electionId) === 0 : this.electionId === (other === null || other === void 0 ? void 0 : other.electionId);
        return other != null && other.iscryptd === this.iscryptd && (0, utils_1.errorStrictEqual)(this.error, other.error) && this.type === other.type && this.minWireVersion === other.minWireVersion && (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) && tagsStrictEqual(this.tags, other.tags) && this.setName === other.setName && this.setVersion === other.setVersion && electionIdsEqual && this.primary === other.primary && this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes && topologyVersionsEqual;
    }
    /**
     * Create a ServerDescription
     * @internal
     *
     * @param address - The address of the server
     * @param hello - An optional hello response for this server
     */ constructor(address, hello, options = {}){
        var _hello_hosts, _hello_passives, _hello_arbiters, _hello_lastWrite, _this_error, _this_error1, _hello_me;
        if (address == null || address === '') {
            throw new error_1.MongoRuntimeError('ServerDescription must be provided with a non-empty address');
        }
        this.address = typeof address === 'string' ? utils_1.HostAddress.fromString(address).toString() // Use HostAddress to normalize
         : address.toString();
        this.type = parseServerType(hello, options);
        var _hello_hosts_map;
        this.hosts = (_hello_hosts_map = hello === null || hello === void 0 ? void 0 : (_hello_hosts = hello.hosts) === null || _hello_hosts === void 0 ? void 0 : _hello_hosts.map((host)=>host.toLowerCase())) !== null && _hello_hosts_map !== void 0 ? _hello_hosts_map : [];
        var _hello_passives_map;
        this.passives = (_hello_passives_map = hello === null || hello === void 0 ? void 0 : (_hello_passives = hello.passives) === null || _hello_passives === void 0 ? void 0 : _hello_passives.map((host)=>host.toLowerCase())) !== null && _hello_passives_map !== void 0 ? _hello_passives_map : [];
        var _hello_arbiters_map;
        this.arbiters = (_hello_arbiters_map = hello === null || hello === void 0 ? void 0 : (_hello_arbiters = hello.arbiters) === null || _hello_arbiters === void 0 ? void 0 : _hello_arbiters.map((host)=>host.toLowerCase())) !== null && _hello_arbiters_map !== void 0 ? _hello_arbiters_map : [];
        var _hello_tags;
        this.tags = (_hello_tags = hello === null || hello === void 0 ? void 0 : hello.tags) !== null && _hello_tags !== void 0 ? _hello_tags : {};
        var _hello_minWireVersion;
        this.minWireVersion = (_hello_minWireVersion = hello === null || hello === void 0 ? void 0 : hello.minWireVersion) !== null && _hello_minWireVersion !== void 0 ? _hello_minWireVersion : 0;
        var _hello_maxWireVersion;
        this.maxWireVersion = (_hello_maxWireVersion = hello === null || hello === void 0 ? void 0 : hello.maxWireVersion) !== null && _hello_maxWireVersion !== void 0 ? _hello_maxWireVersion : 0;
        var _options_roundTripTime;
        this.roundTripTime = (_options_roundTripTime = options === null || options === void 0 ? void 0 : options.roundTripTime) !== null && _options_roundTripTime !== void 0 ? _options_roundTripTime : -1;
        var _options_minRoundTripTime;
        this.minRoundTripTime = (_options_minRoundTripTime = options === null || options === void 0 ? void 0 : options.minRoundTripTime) !== null && _options_minRoundTripTime !== void 0 ? _options_minRoundTripTime : 0;
        this.lastUpdateTime = (0, utils_1.now)();
        var _hello_lastWrite_lastWriteDate;
        this.lastWriteDate = (_hello_lastWrite_lastWriteDate = hello === null || hello === void 0 ? void 0 : (_hello_lastWrite = hello.lastWrite) === null || _hello_lastWrite === void 0 ? void 0 : _hello_lastWrite.lastWriteDate) !== null && _hello_lastWrite_lastWriteDate !== void 0 ? _hello_lastWrite_lastWriteDate : 0;
        var _options_error;
        // NOTE: This actually builds the stack string instead of holding onto the getter and all its
        // associated references. This is done to prevent a memory leak.
        this.error = (_options_error = options.error) !== null && _options_error !== void 0 ? _options_error : null;
        (_this_error = this.error) === null || _this_error === void 0 ? void 0 : _this_error.stack;
        var _this_error_topologyVersion, _ref;
        // TODO(NODE-2674): Preserve int64 sent from MongoDB
        this.topologyVersion = (_ref = (_this_error_topologyVersion = (_this_error1 = this.error) === null || _this_error1 === void 0 ? void 0 : _this_error1.topologyVersion) !== null && _this_error_topologyVersion !== void 0 ? _this_error_topologyVersion : hello === null || hello === void 0 ? void 0 : hello.topologyVersion) !== null && _ref !== void 0 ? _ref : null;
        var _hello_setName;
        this.setName = (_hello_setName = hello === null || hello === void 0 ? void 0 : hello.setName) !== null && _hello_setName !== void 0 ? _hello_setName : null;
        var _hello_setVersion;
        this.setVersion = (_hello_setVersion = hello === null || hello === void 0 ? void 0 : hello.setVersion) !== null && _hello_setVersion !== void 0 ? _hello_setVersion : null;
        var _hello_electionId;
        this.electionId = (_hello_electionId = hello === null || hello === void 0 ? void 0 : hello.electionId) !== null && _hello_electionId !== void 0 ? _hello_electionId : null;
        var _hello_logicalSessionTimeoutMinutes;
        this.logicalSessionTimeoutMinutes = (_hello_logicalSessionTimeoutMinutes = hello === null || hello === void 0 ? void 0 : hello.logicalSessionTimeoutMinutes) !== null && _hello_logicalSessionTimeoutMinutes !== void 0 ? _hello_logicalSessionTimeoutMinutes : null;
        var _hello_maxMessageSizeBytes;
        this.maxMessageSizeBytes = (_hello_maxMessageSizeBytes = hello === null || hello === void 0 ? void 0 : hello.maxMessageSizeBytes) !== null && _hello_maxMessageSizeBytes !== void 0 ? _hello_maxMessageSizeBytes : null;
        var _hello_maxWriteBatchSize;
        this.maxWriteBatchSize = (_hello_maxWriteBatchSize = hello === null || hello === void 0 ? void 0 : hello.maxWriteBatchSize) !== null && _hello_maxWriteBatchSize !== void 0 ? _hello_maxWriteBatchSize : null;
        var _hello_maxBsonObjectSize;
        this.maxBsonObjectSize = (_hello_maxBsonObjectSize = hello === null || hello === void 0 ? void 0 : hello.maxBsonObjectSize) !== null && _hello_maxBsonObjectSize !== void 0 ? _hello_maxBsonObjectSize : null;
        var _hello_primary;
        this.primary = (_hello_primary = hello === null || hello === void 0 ? void 0 : hello.primary) !== null && _hello_primary !== void 0 ? _hello_primary : null;
        var _hello_me_toLowerCase;
        this.me = (_hello_me_toLowerCase = hello === null || hello === void 0 ? void 0 : (_hello_me = hello.me) === null || _hello_me === void 0 ? void 0 : _hello_me.toLowerCase()) !== null && _hello_me_toLowerCase !== void 0 ? _hello_me_toLowerCase : null;
        var _hello_$clusterTime;
        this.$clusterTime = (_hello_$clusterTime = hello === null || hello === void 0 ? void 0 : hello.$clusterTime) !== null && _hello_$clusterTime !== void 0 ? _hello_$clusterTime : null;
        this.iscryptd = Boolean(hello === null || hello === void 0 ? void 0 : hello.iscryptd);
    }
}
exports.ServerDescription = ServerDescription;
// Parses a `hello` message and determines the server type
function parseServerType(hello, options) {
    if (options === null || options === void 0 ? void 0 : options.loadBalanced) {
        return common_1.ServerType.LoadBalancer;
    }
    if (!hello || !hello.ok) {
        return common_1.ServerType.Unknown;
    }
    if (hello.isreplicaset) {
        return common_1.ServerType.RSGhost;
    }
    if (hello.msg && hello.msg === 'isdbgrid') {
        return common_1.ServerType.Mongos;
    }
    if (hello.setName) {
        if (hello.hidden) {
            return common_1.ServerType.RSOther;
        } else if (hello.isWritablePrimary) {
            return common_1.ServerType.RSPrimary;
        } else if (hello.secondary) {
            return common_1.ServerType.RSSecondary;
        } else if (hello.arbiterOnly) {
            return common_1.ServerType.RSArbiter;
        } else {
            return common_1.ServerType.RSOther;
        }
    }
    return common_1.ServerType.Standalone;
}
function tagsStrictEqual(tags, tags2) {
    const tagsKeys = Object.keys(tags);
    const tags2Keys = Object.keys(tags2);
    return tagsKeys.length === tags2Keys.length && tagsKeys.every((key)=>tags2[key] === tags[key]);
}
/**
 * Compares two topology versions.
 *
 * 1. If the response topologyVersion is unset or the ServerDescription's
 *    topologyVersion is null, the client MUST assume the response is more recent.
 * 1. If the response's topologyVersion.processId is not equal to the
 *    ServerDescription's, the client MUST assume the response is more recent.
 * 1. If the response's topologyVersion.processId is equal to the
 *    ServerDescription's, the client MUST use the counter field to determine
 *    which topologyVersion is more recent.
 *
 * ```ts
 * currentTv <   newTv === -1
 * currentTv === newTv === 0
 * currentTv >   newTv === 1
 * ```
 */ function compareTopologyVersion(currentTv, newTv) {
    if (currentTv == null || newTv == null) {
        return -1;
    }
    if (!currentTv.processId.equals(newTv.processId)) {
        return -1;
    }
    // TODO(NODE-2674): Preserve int64 sent from MongoDB
    const currentCounter = typeof currentTv.counter === 'bigint' ? bson_1.Long.fromBigInt(currentTv.counter) : bson_1.Long.isLong(currentTv.counter) ? currentTv.counter : bson_1.Long.fromNumber(currentTv.counter);
    const newCounter = typeof newTv.counter === 'bigint' ? bson_1.Long.fromBigInt(newTv.counter) : bson_1.Long.isLong(newTv.counter) ? newTv.counter : bson_1.Long.fromNumber(newTv.counter);
    return currentCounter.compare(newCounter);
} //# sourceMappingURL=server_description.js.map
}),
"[project]/node_modules/mongodb/lib/sdam/topology_description.js [app-client] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TopologyDescription = void 0;
const bson_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/bson.js [app-client] (ecmascript)");
const WIRE_CONSTANTS = __turbopack_context__.r("[project]/node_modules/mongodb/lib/cmap/wire_protocol/constants.js [app-client] (ecmascript)");
const error_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/error.js [app-client] (ecmascript)");
const utils_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/utils.js [app-client] (ecmascript)");
const common_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/common.js [app-client] (ecmascript)");
const server_description_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/server_description.js [app-client] (ecmascript)");
// constants related to compatibility checks
const MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;
const MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;
const MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;
const MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;
const MONGOS_OR_UNKNOWN = new Set([
    common_1.ServerType.Mongos,
    common_1.ServerType.Unknown
]);
const MONGOS_OR_STANDALONE = new Set([
    common_1.ServerType.Mongos,
    common_1.ServerType.Standalone
]);
const NON_PRIMARY_RS_MEMBERS = new Set([
    common_1.ServerType.RSSecondary,
    common_1.ServerType.RSArbiter,
    common_1.ServerType.RSOther
]);
/**
 * Representation of a deployment of servers
 * @public
 */ class TopologyDescription {
    /**
     * Returns a new TopologyDescription based on the SrvPollingEvent
     * @internal
     */ updateFromSrvPollingEvent(ev) {
        let srvMaxHosts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        /** The SRV addresses defines the set of addresses we should be using */ const incomingHostnames = ev.hostnames();
        const currentHostnames = new Set(this.servers.keys());
        const hostnamesToAdd = new Set(incomingHostnames);
        const hostnamesToRemove = new Set();
        for (const hostname of currentHostnames){
            // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames
            hostnamesToAdd.delete(hostname);
            if (!incomingHostnames.has(hostname)) {
                // If the SRV Records no longer include this hostname
                // we have to stop using it
                hostnamesToRemove.add(hostname);
            }
        }
        if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {
            // No new hosts to add and none to remove
            return this;
        }
        const serverDescriptions = new Map(this.servers);
        for (const removedHost of hostnamesToRemove){
            serverDescriptions.delete(removedHost);
        }
        if (hostnamesToAdd.size > 0) {
            if (srvMaxHosts === 0) {
                // Add all!
                for (const hostToAdd of hostnamesToAdd){
                    serverDescriptions.set(hostToAdd, new server_description_1.ServerDescription(hostToAdd));
                }
            } else if (serverDescriptions.size < srvMaxHosts) {
                // Add only the amount needed to get us back to srvMaxHosts
                const selectedHosts = (0, utils_1.shuffle)(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);
                for (const selectedHostToAdd of selectedHosts){
                    serverDescriptions.set(selectedHostToAdd, new server_description_1.ServerDescription(selectedHostToAdd));
                }
            }
        }
        return new TopologyDescription(this.type, serverDescriptions, this.setName, this.maxSetVersion, this.maxElectionId, this.commonWireVersion, {
            heartbeatFrequencyMS: this.heartbeatFrequencyMS,
            localThresholdMS: this.localThresholdMS
        });
    }
    /**
     * Returns a copy of this description updated with a given ServerDescription
     * @internal
     */ update(serverDescription) {
        const address = serverDescription.address;
        // potentially mutated values
        let { type: topologyType, setName, maxSetVersion, maxElectionId, commonWireVersion } = this;
        const serverType = serverDescription.type;
        const serverDescriptions = new Map(this.servers);
        // update common wire version
        if (serverDescription.maxWireVersion !== 0) {
            if (commonWireVersion == null) {
                commonWireVersion = serverDescription.maxWireVersion;
            } else {
                commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);
            }
        }
        if (typeof serverDescription.setName === 'string' && typeof setName === 'string' && serverDescription.setName !== setName) {
            if (topologyType === common_1.TopologyType.Single) {
                // "Single" Topology with setName mismatch is direct connection usage, mark unknown do not remove
                serverDescription = new server_description_1.ServerDescription(address);
            } else {
                serverDescriptions.delete(address);
            }
        }
        // update the actual server description
        serverDescriptions.set(address, serverDescription);
        if (topologyType === common_1.TopologyType.Single) {
            // once we are defined as single, that never changes
            return new TopologyDescription(common_1.TopologyType.Single, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, {
                heartbeatFrequencyMS: this.heartbeatFrequencyMS,
                localThresholdMS: this.localThresholdMS
            });
        }
        if (topologyType === common_1.TopologyType.Unknown) {
            if (serverType === common_1.ServerType.Standalone && this.servers.size !== 1) {
                serverDescriptions.delete(address);
            } else {
                topologyType = topologyTypeForServerType(serverType);
            }
        }
        if (topologyType === common_1.TopologyType.Sharded) {
            if (!MONGOS_OR_UNKNOWN.has(serverType)) {
                serverDescriptions.delete(address);
            }
        }
        if (topologyType === common_1.TopologyType.ReplicaSetNoPrimary) {
            if (MONGOS_OR_STANDALONE.has(serverType)) {
                serverDescriptions.delete(address);
            }
            if (serverType === common_1.ServerType.RSPrimary) {
                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);
                topologyType = result[0];
                setName = result[1];
                maxSetVersion = result[2];
                maxElectionId = result[3];
            } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {
                const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);
                topologyType = result[0];
                setName = result[1];
            }
        }
        if (topologyType === common_1.TopologyType.ReplicaSetWithPrimary) {
            if (MONGOS_OR_STANDALONE.has(serverType)) {
                serverDescriptions.delete(address);
                topologyType = checkHasPrimary(serverDescriptions);
            } else if (serverType === common_1.ServerType.RSPrimary) {
                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);
                topologyType = result[0];
                setName = result[1];
                maxSetVersion = result[2];
                maxElectionId = result[3];
            } else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {
                topologyType = updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName);
            } else {
                topologyType = checkHasPrimary(serverDescriptions);
            }
        }
        return new TopologyDescription(topologyType, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, {
            heartbeatFrequencyMS: this.heartbeatFrequencyMS,
            localThresholdMS: this.localThresholdMS
        });
    }
    get error() {
        const descriptionsWithError = Array.from(this.servers.values()).filter((sd)=>sd.error);
        if (descriptionsWithError.length > 0) {
            return descriptionsWithError[0].error;
        }
        return null;
    }
    /**
     * Determines if the topology description has any known servers
     */ get hasKnownServers() {
        return Array.from(this.servers.values()).some((sd)=>sd.type !== common_1.ServerType.Unknown);
    }
    /**
     * Determines if this topology description has a data-bearing server available.
     */ get hasDataBearingServers() {
        return Array.from(this.servers.values()).some((sd)=>sd.isDataBearing);
    }
    /**
     * Determines if the topology has a definition for the provided address
     * @internal
     */ hasServer(address) {
        return this.servers.has(address);
    }
    /**
     * Returns a JSON-serializable representation of the TopologyDescription.  This is primarily
     * intended for use with JSON.stringify().
     *
     * This method will not throw.
     */ toJSON() {
        return bson_1.EJSON.serialize(this);
    }
    /**
     * Create a TopologyDescription
     */ constructor(topologyType, serverDescriptions = null, setName = null, maxSetVersion = null, maxElectionId = null, commonWireVersion = null, options = null){
        options = options !== null && options !== void 0 ? options : {};
        this.type = topologyType !== null && topologyType !== void 0 ? topologyType : common_1.TopologyType.Unknown;
        this.servers = serverDescriptions !== null && serverDescriptions !== void 0 ? serverDescriptions : new Map();
        this.stale = false;
        this.compatible = true;
        var _options_heartbeatFrequencyMS;
        this.heartbeatFrequencyMS = (_options_heartbeatFrequencyMS = options.heartbeatFrequencyMS) !== null && _options_heartbeatFrequencyMS !== void 0 ? _options_heartbeatFrequencyMS : 0;
        var _options_localThresholdMS;
        this.localThresholdMS = (_options_localThresholdMS = options.localThresholdMS) !== null && _options_localThresholdMS !== void 0 ? _options_localThresholdMS : 15;
        this.setName = setName !== null && setName !== void 0 ? setName : null;
        this.maxElectionId = maxElectionId !== null && maxElectionId !== void 0 ? maxElectionId : null;
        this.maxSetVersion = maxSetVersion !== null && maxSetVersion !== void 0 ? maxSetVersion : null;
        this.commonWireVersion = commonWireVersion !== null && commonWireVersion !== void 0 ? commonWireVersion : 0;
        // determine server compatibility
        for (const serverDescription of this.servers.values()){
            // Load balancer mode is always compatible.
            if (serverDescription.type === common_1.ServerType.Unknown || serverDescription.type === common_1.ServerType.LoadBalancer) {
                continue;
            }
            if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {
                this.compatible = false;
                this.compatibilityError = "Server at ".concat(serverDescription.address, " requires wire version ").concat(serverDescription.minWireVersion, ", but this version of the driver only supports up to ").concat(MAX_SUPPORTED_WIRE_VERSION, " (MongoDB ").concat(MAX_SUPPORTED_SERVER_VERSION, ")");
            }
            if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {
                this.compatible = false;
                this.compatibilityError = "Server at ".concat(serverDescription.address, " reports wire version ").concat(serverDescription.maxWireVersion, ", but this version of the driver requires at least ").concat(MIN_SUPPORTED_WIRE_VERSION, " (MongoDB ").concat(MIN_SUPPORTED_SERVER_VERSION, ").");
                break;
            }
        }
        // Whenever a client updates the TopologyDescription from a hello response, it MUST set
        // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes
        // value among ServerDescriptions of all data-bearing server types. If any have a null
        // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be
        // set to null.
        this.logicalSessionTimeoutMinutes = null;
        for (const [, server] of this.servers){
            if (server.isReadable) {
                if (server.logicalSessionTimeoutMinutes == null) {
                    // If any of the servers have a null logicalSessionsTimeout, then the whole topology does
                    this.logicalSessionTimeoutMinutes = null;
                    break;
                }
                if (this.logicalSessionTimeoutMinutes == null) {
                    // First server with a non null logicalSessionsTimeout
                    this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;
                    continue;
                }
                // Always select the smaller of the:
                // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout
                this.logicalSessionTimeoutMinutes = Math.min(this.logicalSessionTimeoutMinutes, server.logicalSessionTimeoutMinutes);
            }
        }
    }
}
exports.TopologyDescription = TopologyDescription;
function topologyTypeForServerType(serverType) {
    switch(serverType){
        case common_1.ServerType.Standalone:
            return common_1.TopologyType.Single;
        case common_1.ServerType.Mongos:
            return common_1.TopologyType.Sharded;
        case common_1.ServerType.RSPrimary:
            return common_1.TopologyType.ReplicaSetWithPrimary;
        case common_1.ServerType.RSOther:
        case common_1.ServerType.RSSecondary:
            return common_1.TopologyType.ReplicaSetNoPrimary;
        default:
            return common_1.TopologyType.Unknown;
    }
}
function updateRsFromPrimary(serverDescriptions, serverDescription) {
    let setName = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, maxSetVersion = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null, maxElectionId = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
    const setVersionElectionIdMismatch = (serverDescription, maxSetVersion, maxElectionId)=>{
        return "primary marked stale due to electionId/setVersion mismatch:" + " server setVersion: ".concat(serverDescription.setVersion, ",") + " server electionId: ".concat(serverDescription.electionId, ",") + " topology setVersion: ".concat(maxSetVersion, ",") + " topology electionId: ".concat(maxElectionId);
    };
    setName = setName || serverDescription.setName;
    if (setName !== serverDescription.setName) {
        serverDescriptions.delete(serverDescription.address);
        return [
            checkHasPrimary(serverDescriptions),
            setName,
            maxSetVersion,
            maxElectionId
        ];
    }
    if (serverDescription.maxWireVersion >= 17) {
        const electionIdComparison = (0, utils_1.compareObjectId)(maxElectionId, serverDescription.electionId);
        const maxElectionIdIsEqual = electionIdComparison === 0;
        const maxElectionIdIsLess = electionIdComparison === -1;
        var _serverDescription_setVersion;
        const maxSetVersionIsLessOrEqual = (maxSetVersion !== null && maxSetVersion !== void 0 ? maxSetVersion : -1) <= ((_serverDescription_setVersion = serverDescription.setVersion) !== null && _serverDescription_setVersion !== void 0 ? _serverDescription_setVersion : -1);
        if (maxElectionIdIsLess || maxElectionIdIsEqual && maxSetVersionIsLessOrEqual) {
            // The reported electionId was greater
            // or the electionId was equal and reported setVersion was greater
            // Always update both values, they are a tuple
            maxElectionId = serverDescription.electionId;
            maxSetVersion = serverDescription.setVersion;
        } else {
            // Stale primary
            // replace serverDescription with a default ServerDescription of type "Unknown"
            serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address, undefined, {
                error: new error_1.MongoStalePrimaryError(setVersionElectionIdMismatch(serverDescription, maxSetVersion, maxElectionId))
            }));
            return [
                checkHasPrimary(serverDescriptions),
                setName,
                maxSetVersion,
                maxElectionId
            ];
        }
    } else {
        const electionId = serverDescription.electionId ? serverDescription.electionId : null;
        if (serverDescription.setVersion && electionId) {
            if (maxSetVersion && maxElectionId) {
                if (maxSetVersion > serverDescription.setVersion || (0, utils_1.compareObjectId)(maxElectionId, electionId) > 0) {
                    // this primary is stale, we must remove it
                    serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address, undefined, {
                        error: new error_1.MongoStalePrimaryError(setVersionElectionIdMismatch(serverDescription, maxSetVersion, maxElectionId))
                    }));
                    return [
                        checkHasPrimary(serverDescriptions),
                        setName,
                        maxSetVersion,
                        maxElectionId
                    ];
                }
            }
            maxElectionId = serverDescription.electionId;
        }
        if (serverDescription.setVersion != null && (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)) {
            maxSetVersion = serverDescription.setVersion;
        }
    }
    // We've heard from the primary. Is it the same primary as before?
    for (const [address, server] of serverDescriptions){
        if (server.type === common_1.ServerType.RSPrimary && server.address !== serverDescription.address) {
            // Reset old primary's type to Unknown.
            serverDescriptions.set(address, new server_description_1.ServerDescription(server.address, undefined, {
                error: new error_1.MongoStalePrimaryError('primary marked stale due to discovery of newer primary')
            }));
            break;
        }
    }
    // Discover new hosts from this primary's response.
    serverDescription.allHosts.forEach((address)=>{
        if (!serverDescriptions.has(address)) {
            serverDescriptions.set(address, new server_description_1.ServerDescription(address));
        }
    });
    // Remove hosts not in the response.
    const currentAddresses = Array.from(serverDescriptions.keys());
    const responseAddresses = serverDescription.allHosts;
    currentAddresses.filter((addr)=>responseAddresses.indexOf(addr) === -1).forEach((address)=>{
        serverDescriptions.delete(address);
    });
    return [
        checkHasPrimary(serverDescriptions),
        setName,
        maxSetVersion,
        maxElectionId
    ];
}
function updateRsWithPrimaryFromMember(serverDescriptions, serverDescription) {
    let setName = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    if (setName == null) {
        // TODO(NODE-3483): should be an appropriate runtime error
        throw new error_1.MongoRuntimeError('Argument "setName" is required if connected to a replica set');
    }
    if (setName !== serverDescription.setName || serverDescription.me && serverDescription.address !== serverDescription.me) {
        serverDescriptions.delete(serverDescription.address);
    }
    return checkHasPrimary(serverDescriptions);
}
function updateRsNoPrimaryFromMember(serverDescriptions, serverDescription) {
    let setName = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    const topologyType = common_1.TopologyType.ReplicaSetNoPrimary;
    setName = setName !== null && setName !== void 0 ? setName : serverDescription.setName;
    if (setName !== serverDescription.setName) {
        serverDescriptions.delete(serverDescription.address);
        return [
            topologyType,
            setName
        ];
    }
    serverDescription.allHosts.forEach((address)=>{
        if (!serverDescriptions.has(address)) {
            serverDescriptions.set(address, new server_description_1.ServerDescription(address));
        }
    });
    if (serverDescription.me && serverDescription.address !== serverDescription.me) {
        serverDescriptions.delete(serverDescription.address);
    }
    return [
        topologyType,
        setName
    ];
}
function checkHasPrimary(serverDescriptions) {
    for (const serverDescription of serverDescriptions.values()){
        if (serverDescription.type === common_1.ServerType.RSPrimary) {
            return common_1.TopologyType.ReplicaSetWithPrimary;
        }
    }
    return common_1.TopologyType.ReplicaSetNoPrimary;
} //# sourceMappingURL=topology_description.js.map
}),
"[project]/node_modules/mongodb/lib/sdam/events.js [app-client] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;
const constants_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/constants.js [app-client] (ecmascript)");
/**
 * Emitted when server description changes, but does NOT include changes to the RTT.
 * @public
 * @category Event
 */ class ServerDescriptionChangedEvent {
    /** @internal */ constructor(topologyId, address, previousDescription, newDescription){
        this.name = constants_1.SERVER_DESCRIPTION_CHANGED;
        this.topologyId = topologyId;
        this.address = address;
        this.previousDescription = previousDescription;
        this.newDescription = newDescription;
    }
}
exports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;
/**
 * Emitted when server is initialized.
 * @public
 * @category Event
 */ class ServerOpeningEvent {
    /** @internal */ constructor(topologyId, address){
        /** @internal */ this.name = constants_1.SERVER_OPENING;
        this.topologyId = topologyId;
        this.address = address;
    }
}
exports.ServerOpeningEvent = ServerOpeningEvent;
/**
 * Emitted when server is closed.
 * @public
 * @category Event
 */ class ServerClosedEvent {
    /** @internal */ constructor(topologyId, address){
        /** @internal */ this.name = constants_1.SERVER_CLOSED;
        this.topologyId = topologyId;
        this.address = address;
    }
}
exports.ServerClosedEvent = ServerClosedEvent;
/**
 * Emitted when topology description changes.
 * @public
 * @category Event
 */ class TopologyDescriptionChangedEvent {
    /** @internal */ constructor(topologyId, previousDescription, newDescription){
        /** @internal */ this.name = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;
        this.topologyId = topologyId;
        this.previousDescription = previousDescription;
        this.newDescription = newDescription;
    }
}
exports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;
/**
 * Emitted when topology is initialized.
 * @public
 * @category Event
 */ class TopologyOpeningEvent {
    /** @internal */ constructor(topologyId){
        /** @internal */ this.name = constants_1.TOPOLOGY_OPENING;
        this.topologyId = topologyId;
    }
}
exports.TopologyOpeningEvent = TopologyOpeningEvent;
/**
 * Emitted when topology is closed.
 * @public
 * @category Event
 */ class TopologyClosedEvent {
    /** @internal */ constructor(topologyId){
        /** @internal */ this.name = constants_1.TOPOLOGY_CLOSED;
        this.topologyId = topologyId;
    }
}
exports.TopologyClosedEvent = TopologyClosedEvent;
/**
 * Emitted when the server monitor’s hello command is started - immediately before
 * the hello command is serialized into raw BSON and written to the socket.
 *
 * @public
 * @category Event
 */ class ServerHeartbeatStartedEvent {
    /** @internal */ constructor(connectionId, awaited){
        /** @internal */ this.name = constants_1.SERVER_HEARTBEAT_STARTED;
        this.connectionId = connectionId;
        this.awaited = awaited;
    }
}
exports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;
/**
 * Emitted when the server monitor’s hello succeeds.
 * @public
 * @category Event
 */ class ServerHeartbeatSucceededEvent {
    /** @internal */ constructor(connectionId, duration, reply, awaited){
        /** @internal */ this.name = constants_1.SERVER_HEARTBEAT_SUCCEEDED;
        this.connectionId = connectionId;
        this.duration = duration;
        this.reply = reply !== null && reply !== void 0 ? reply : {};
        this.awaited = awaited;
    }
}
exports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;
/**
 * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.
 * @public
 * @category Event
 */ class ServerHeartbeatFailedEvent {
    /** @internal */ constructor(connectionId, duration, failure, awaited){
        /** @internal */ this.name = constants_1.SERVER_HEARTBEAT_FAILED;
        this.connectionId = connectionId;
        this.duration = duration;
        this.failure = failure;
        this.awaited = awaited;
    }
}
exports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent; //# sourceMappingURL=events.js.map
}),
"[project]/node_modules/mongodb/lib/sdam/server.js [app-client] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = /*#__PURE__*/ __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Server = void 0;
const connection_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/cmap/connection.js [app-client] (ecmascript)");
const connection_pool_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/cmap/connection_pool.js [app-client] (ecmascript)");
const errors_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/cmap/errors.js [app-client] (ecmascript)");
const constants_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/constants.js [app-client] (ecmascript)");
const error_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/error.js [app-client] (ecmascript)");
const mongo_types_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/mongo_types.js [app-client] (ecmascript)");
const transactions_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/transactions.js [app-client] (ecmascript)");
const utils_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/utils.js [app-client] (ecmascript)");
const write_concern_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/write_concern.js [app-client] (ecmascript)");
const common_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/common.js [app-client] (ecmascript)");
const monitor_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/monitor.js [app-client] (ecmascript)");
const server_description_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/server_description.js [app-client] (ecmascript)");
const stateTransition = (0, utils_1.makeStateMachine)({
    [common_1.STATE_CLOSED]: [
        common_1.STATE_CLOSED,
        common_1.STATE_CONNECTING
    ],
    [common_1.STATE_CONNECTING]: [
        common_1.STATE_CONNECTING,
        common_1.STATE_CLOSING,
        common_1.STATE_CONNECTED,
        common_1.STATE_CLOSED
    ],
    [common_1.STATE_CONNECTED]: [
        common_1.STATE_CONNECTED,
        common_1.STATE_CLOSING,
        common_1.STATE_CLOSED
    ],
    [common_1.STATE_CLOSING]: [
        common_1.STATE_CLOSING,
        common_1.STATE_CLOSED
    ]
});
/** @internal */ class Server extends mongo_types_1.TypedEventEmitter {
    get clusterTime() {
        return this.topology.clusterTime;
    }
    set clusterTime(clusterTime) {
        this.topology.clusterTime = clusterTime;
    }
    get description() {
        return this.s.description;
    }
    get name() {
        return this.s.description.address;
    }
    get autoEncrypter() {
        if (this.s.options && this.s.options.autoEncrypter) {
            return this.s.options.autoEncrypter;
        }
        return;
    }
    get loadBalanced() {
        return this.topology.description.type === common_1.TopologyType.LoadBalanced;
    }
    /**
     * Initiate server connect
     */ connect() {
        if (this.s.state !== common_1.STATE_CLOSED) {
            return;
        }
        stateTransition(this, common_1.STATE_CONNECTING);
        // If in load balancer mode we automatically set the server to
        // a load balancer. It never transitions out of this state and
        // has no monitor.
        if (!this.loadBalanced) {
            var _this_monitor;
            (_this_monitor = this.monitor) === null || _this_monitor === void 0 ? void 0 : _this_monitor.connect();
        } else {
            stateTransition(this, common_1.STATE_CONNECTED);
            this.emit(Server.CONNECT, this);
        }
    }
    closeCheckedOutConnections() {
        return this.pool.closeCheckedOutConnections();
    }
    /** Destroy the server connection */ close() {
        if (this.s.state === common_1.STATE_CLOSED) {
            return;
        }
        stateTransition(this, common_1.STATE_CLOSING);
        if (!this.loadBalanced) {
            var _this_monitor;
            (_this_monitor = this.monitor) === null || _this_monitor === void 0 ? void 0 : _this_monitor.close();
        }
        this.pool.close();
        stateTransition(this, common_1.STATE_CLOSED);
        this.emit('closed');
    }
    /**
     * Immediately schedule monitoring of this server. If there already an attempt being made
     * this will be a no-op.
     */ requestCheck() {
        if (!this.loadBalanced) {
            var _this_monitor;
            (_this_monitor = this.monitor) === null || _this_monitor === void 0 ? void 0 : _this_monitor.requestCheck();
        }
    }
    async command(ns, cmd, param, responseType) {
        let { ...options } = param;
        if (ns.db == null || typeof ns === 'string') {
            throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');
        }
        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {
            throw new error_1.MongoServerClosedError();
        }
        options.directConnection = this.topology.s.options.directConnection;
        // There are cases where we need to flag the read preference not to get sent in
        // the command, such as pre-5.0 servers attempting to perform an aggregate write
        // with a non-primary read preference. In this case the effective read preference
        // (primary) is not the same as the provided and must be removed completely.
        if (options.omitReadPreference) {
            delete options.readPreference;
        }
        if (this.description.iscryptd) {
            options.omitMaxTimeMS = true;
        }
        const session = options.session;
        let conn = session === null || session === void 0 ? void 0 : session.pinnedConnection;
        this.incrementOperationCount();
        if (conn == null) {
            try {
                conn = await this.pool.checkOut(options);
                if (this.loadBalanced && isPinnableCommand(cmd, session)) {
                    session === null || session === void 0 ? void 0 : session.pin(conn);
                }
            } catch (checkoutError) {
                this.decrementOperationCount();
                if (!(checkoutError instanceof errors_1.PoolClearedError)) this.handleError(checkoutError);
                throw checkoutError;
            }
        }
        let reauthPromise = null;
        try {
            try {
                const res = await conn.command(ns, cmd, options, responseType);
                (0, write_concern_1.throwIfWriteConcernError)(res);
                return res;
            } catch (commandError) {
                throw this.decorateCommandError(conn, cmd, options, commandError);
            }
        } catch (operationError) {
            if (operationError instanceof error_1.MongoError && operationError.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {
                reauthPromise = this.pool.reauthenticate(conn);
                reauthPromise.then(undefined, (error)=>{
                    reauthPromise = null;
                    (0, utils_1.squashError)(error);
                });
                await (0, utils_1.abortable)(reauthPromise, options);
                reauthPromise = null; // only reachable if reauth succeeds
                try {
                    const res = await conn.command(ns, cmd, options, responseType);
                    (0, write_concern_1.throwIfWriteConcernError)(res);
                    return res;
                } catch (commandError) {
                    throw this.decorateCommandError(conn, cmd, options, commandError);
                }
            } else {
                throw operationError;
            }
        } finally{
            this.decrementOperationCount();
            if ((session === null || session === void 0 ? void 0 : session.pinnedConnection) !== conn) {
                if (reauthPromise != null) {
                    // The reauth promise only exists if it hasn't thrown.
                    const checkBackIn = ()=>{
                        this.pool.checkIn(conn);
                    };
                    void reauthPromise.then(checkBackIn, checkBackIn);
                } else {
                    this.pool.checkIn(conn);
                }
            }
        }
    }
    /**
     * Handle SDAM error
     * @internal
     */ handleError(error, connection) {
        if (!(error instanceof error_1.MongoError)) {
            return;
        }
        const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;
        if (isStaleError) {
            return;
        }
        const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);
        const isNetworkTimeoutBeforeHandshakeError = error instanceof error_1.MongoNetworkError && error.beforeHandshake;
        const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);
        if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {
            // In load balanced mode we never mark the server as unknown and always
            // clear for the specific service id.
            if (!this.loadBalanced) {
                error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);
                markServerUnknown(this, error);
            } else if (connection) {
                this.pool.clear({
                    serviceId: connection.serviceId
                });
            }
        } else {
            if ((0, error_1.isSDAMUnrecoverableError)(error)) {
                if (shouldHandleStateChangeError(this, error)) {
                    const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);
                    if (this.loadBalanced && connection && shouldClearPool) {
                        this.pool.clear({
                            serviceId: connection.serviceId
                        });
                    }
                    if (!this.loadBalanced) {
                        if (shouldClearPool) {
                            error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);
                        }
                        markServerUnknown(this, error);
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].nextTick(()=>this.requestCheck());
                    }
                }
            }
        }
    }
    /**
     * Ensure that error is properly decorated and internal state is updated before throwing
     * @internal
     */ decorateCommandError(connection, cmd, options, error) {
        if (typeof error !== 'object' || error == null || !('name' in error)) {
            throw new error_1.MongoRuntimeError('An unexpected error type: ' + typeof error);
        }
        if (error.name === 'AbortError' && 'cause' in error && error.cause instanceof error_1.MongoError) {
            error = error.cause;
        }
        if (!(error instanceof error_1.MongoError)) {
            // Node.js or some other error we have not special handling for
            return error;
        }
        if (connectionIsStale(this.pool, connection)) {
            return error;
        }
        const session = options === null || options === void 0 ? void 0 : options.session;
        if (error instanceof error_1.MongoNetworkError) {
            if (session && !session.hasEnded && session.serverSession) {
                session.serverSession.isDirty = true;
            }
            // inActiveTransaction check handles commit and abort.
            if (inActiveTransaction(session, cmd) && !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {
                error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);
            }
            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(this) && !inActiveTransaction(session, cmd)) {
                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);
            }
        } else {
            if ((isRetryableWritesEnabled(this.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(this), this.description.type) && !inActiveTransaction(session, cmd)) {
                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);
            }
        }
        if (session && session.isPinned && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {
            session.unpin({
                force: true
            });
        }
        this.handleError(error, connection);
        return error;
    }
    /**
     * Decrement the operation count, returning the new count.
     */ decrementOperationCount() {
        return this.s.operationCount -= 1;
    }
    /**
     * Increment the operation count, returning the new count.
     */ incrementOperationCount() {
        return this.s.operationCount += 1;
    }
    /**
     * Create a server
     */ constructor(topology, description, options){
        super();
        this.on('error', utils_1.noop);
        this.serverApi = options.serverApi;
        const poolOptions = {
            hostAddress: description.hostAddress,
            ...options
        };
        this.topology = topology;
        this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);
        this.s = {
            description,
            options,
            state: common_1.STATE_CLOSED,
            operationCount: 0
        };
        for (const event of [
            ...constants_1.CMAP_EVENTS,
            ...constants_1.APM_EVENTS
        ]){
            this.pool.on(event, (e)=>this.emit(event, e));
        }
        this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, (clusterTime)=>{
            this.clusterTime = clusterTime;
        });
        if (this.loadBalanced) {
            this.monitor = null;
            // monitoring is disabled in load balancing mode
            return;
        }
        // create the monitor
        this.monitor = new monitor_1.Monitor(this, this.s.options);
        for (const event of constants_1.HEARTBEAT_EVENTS){
            this.monitor.on(event, (e)=>this.emit(event, e));
        }
        this.monitor.on('resetServer', (error)=>markServerUnknown(this, error));
        this.monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event)=>{
            var _this_monitor, _this_monitor1;
            this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {
                roundTripTime: (_this_monitor = this.monitor) === null || _this_monitor === void 0 ? void 0 : _this_monitor.roundTripTime,
                minRoundTripTime: (_this_monitor1 = this.monitor) === null || _this_monitor1 === void 0 ? void 0 : _this_monitor1.minRoundTripTime
            }));
            if (this.s.state === common_1.STATE_CONNECTING) {
                stateTransition(this, common_1.STATE_CONNECTED);
                this.emit(Server.CONNECT, this);
            }
        });
    }
}
exports.Server = Server;
/** @event */ Server.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;
/** @event */ Server.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;
/** @event */ Server.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;
/** @event */ Server.CONNECT = constants_1.CONNECT;
/** @event */ Server.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;
/** @event */ Server.CLOSED = constants_1.CLOSED;
/** @event */ Server.ENDED = constants_1.ENDED;
function markServerUnknown(server, error) {
    // Load balancer servers can never be marked unknown.
    if (server.loadBalanced) {
        return;
    }
    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {
        var _server_monitor;
        (_server_monitor = server.monitor) === null || _server_monitor === void 0 ? void 0 : _server_monitor.reset();
    }
    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {
        error
    }));
}
function isPinnableCommand(cmd, session) {
    if (session) {
        return session.inTransaction() || session.transaction.isCommitted && 'commitTransaction' in cmd || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd || 'bulkWrite' in cmd;
    }
    return false;
}
function connectionIsStale(pool, connection) {
    if (connection.serviceId) {
        return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());
    }
    return connection.generation !== pool.generation;
}
function shouldHandleStateChangeError(server, err) {
    const etv = err.topologyVersion;
    const stv = server.description.topologyVersion;
    return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;
}
function inActiveTransaction(session, cmd) {
    return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);
}
/** this checks the retryWrites option passed down from the client options, it
 * does not check if the server supports retryable writes */ function isRetryableWritesEnabled(topology) {
    return topology.s.options.retryWrites !== false;
} //# sourceMappingURL=server.js.map
}),
"[project]/node_modules/mongodb/lib/sdam/monitor.js [app-client] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = /*#__PURE__*/ __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RTTSampler = exports.MonitorInterval = exports.RTTPinger = exports.Monitor = exports.ServerMonitoringMode = void 0;
const timers_1 = __turbopack_context__.r("[project]/node_modules/next/dist/compiled/timers-browserify/main.js [app-client] (ecmascript)");
const bson_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/bson.js [app-client] (ecmascript)");
const connect_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/cmap/connect.js [app-client] (ecmascript)");
const client_metadata_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/cmap/handshake/client_metadata.js [app-client] (ecmascript)");
const constants_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/constants.js [app-client] (ecmascript)");
const error_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/error.js [app-client] (ecmascript)");
const mongo_logger_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/mongo_logger.js [app-client] (ecmascript)");
const mongo_types_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/mongo_types.js [app-client] (ecmascript)");
const utils_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/utils.js [app-client] (ecmascript)");
const common_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/common.js [app-client] (ecmascript)");
const events_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/events.js [app-client] (ecmascript)");
const server_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/server.js [app-client] (ecmascript)");
const STATE_IDLE = 'idle';
const STATE_MONITORING = 'monitoring';
const stateTransition = (0, utils_1.makeStateMachine)({
    [common_1.STATE_CLOSING]: [
        common_1.STATE_CLOSING,
        STATE_IDLE,
        common_1.STATE_CLOSED
    ],
    [common_1.STATE_CLOSED]: [
        common_1.STATE_CLOSED,
        STATE_MONITORING
    ],
    [STATE_IDLE]: [
        STATE_IDLE,
        STATE_MONITORING,
        common_1.STATE_CLOSING
    ],
    [STATE_MONITORING]: [
        STATE_MONITORING,
        STATE_IDLE,
        common_1.STATE_CLOSING
    ]
});
const INVALID_REQUEST_CHECK_STATES = new Set([
    common_1.STATE_CLOSING,
    common_1.STATE_CLOSED,
    STATE_MONITORING
]);
function isInCloseState(monitor) {
    return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;
}
/** @public */ exports.ServerMonitoringMode = Object.freeze({
    auto: 'auto',
    poll: 'poll',
    stream: 'stream'
});
/** @internal */ class Monitor extends mongo_types_1.TypedEventEmitter {
    connect() {
        if (this.s.state !== common_1.STATE_CLOSED) {
            return;
        }
        // start
        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;
        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;
        this.monitorId = new MonitorInterval(monitorServer(this), {
            heartbeatFrequencyMS: heartbeatFrequencyMS,
            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,
            immediate: true
        });
    }
    requestCheck() {
        var _this_monitorId;
        if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {
            return;
        }
        (_this_monitorId = this.monitorId) === null || _this_monitorId === void 0 ? void 0 : _this_monitorId.wake();
    }
    reset() {
        const topologyVersion = this.server.description.topologyVersion;
        if (isInCloseState(this) || topologyVersion == null) {
            return;
        }
        stateTransition(this, common_1.STATE_CLOSING);
        resetMonitorState(this);
        // restart monitor
        stateTransition(this, STATE_IDLE);
        // restart monitoring
        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;
        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;
        this.monitorId = new MonitorInterval(monitorServer(this), {
            heartbeatFrequencyMS: heartbeatFrequencyMS,
            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS
        });
    }
    close() {
        if (isInCloseState(this)) {
            return;
        }
        stateTransition(this, common_1.STATE_CLOSING);
        resetMonitorState(this);
        // close monitor
        this.emit('close');
        stateTransition(this, common_1.STATE_CLOSED);
    }
    get roundTripTime() {
        return this.rttSampler.average();
    }
    get minRoundTripTime() {
        return this.rttSampler.min();
    }
    get latestRtt() {
        return this.rttSampler.last;
    }
    addRttSample(rtt) {
        this.rttSampler.addSample(rtt);
    }
    clearRttSamples() {
        this.rttSampler.clear();
    }
    constructor(server, options){
        var _this_server_topology_client;
        super();
        /** @internal */ this.component = mongo_logger_1.MongoLoggableComponent.TOPOLOGY;
        this.on('error', utils_1.noop);
        this.server = server;
        this.connection = null;
        this.cancellationToken = new mongo_types_1.CancellationToken();
        this.cancellationToken.setMaxListeners(Infinity);
        this.monitorId = undefined;
        this.s = {
            state: common_1.STATE_CLOSED
        };
        this.address = server.description.address;
        var _options_connectTimeoutMS, _options_heartbeatFrequencyMS, _options_minHeartbeatFrequencyMS;
        this.options = Object.freeze({
            connectTimeoutMS: (_options_connectTimeoutMS = options.connectTimeoutMS) !== null && _options_connectTimeoutMS !== void 0 ? _options_connectTimeoutMS : 10000,
            heartbeatFrequencyMS: (_options_heartbeatFrequencyMS = options.heartbeatFrequencyMS) !== null && _options_heartbeatFrequencyMS !== void 0 ? _options_heartbeatFrequencyMS : 10000,
            minHeartbeatFrequencyMS: (_options_minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS) !== null && _options_minHeartbeatFrequencyMS !== void 0 ? _options_minHeartbeatFrequencyMS : 500,
            serverMonitoringMode: options.serverMonitoringMode
        });
        this.isRunningInFaasEnv = (0, client_metadata_1.getFAASEnv)() != null;
        this.mongoLogger = (_this_server_topology_client = this.server.topology.client) === null || _this_server_topology_client === void 0 ? void 0 : _this_server_topology_client.mongoLogger;
        this.rttSampler = new RTTSampler(10);
        const cancellationToken = this.cancellationToken;
        // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration
        const connectOptions = {
            id: '<monitor>',
            generation: server.pool.generation,
            cancellationToken,
            hostAddress: server.description.hostAddress,
            ...options,
            // force BSON serialization options
            raw: false,
            useBigInt64: false,
            promoteLongs: true,
            promoteValues: true,
            promoteBuffers: true
        };
        // ensure no authentication is used for monitoring
        delete connectOptions.credentials;
        if (connectOptions.autoEncrypter) {
            delete connectOptions.autoEncrypter;
        }
        this.connectOptions = Object.freeze(connectOptions);
    }
}
exports.Monitor = Monitor;
function resetMonitorState(monitor) {
    var _monitor_monitorId, _monitor_rttPinger, _monitor_connection;
    (_monitor_monitorId = monitor.monitorId) === null || _monitor_monitorId === void 0 ? void 0 : _monitor_monitorId.stop();
    monitor.monitorId = undefined;
    (_monitor_rttPinger = monitor.rttPinger) === null || _monitor_rttPinger === void 0 ? void 0 : _monitor_rttPinger.close();
    monitor.rttPinger = undefined;
    monitor.cancellationToken.emit('cancel');
    (_monitor_connection = monitor.connection) === null || _monitor_connection === void 0 ? void 0 : _monitor_connection.destroy();
    monitor.connection = null;
    monitor.clearRttSamples();
}
function useStreamingProtocol(monitor, topologyVersion) {
    // If we have no topology version we always poll no matter
    // what the user provided, since the server does not support
    // the streaming protocol.
    if (topologyVersion == null) return false;
    const serverMonitoringMode = monitor.options.serverMonitoringMode;
    if (serverMonitoringMode === exports.ServerMonitoringMode.poll) return false;
    if (serverMonitoringMode === exports.ServerMonitoringMode.stream) return true;
    // If we are in auto mode, we need to figure out if we're in a FaaS
    // environment or not and choose the appropriate mode.
    if (monitor.isRunningInFaasEnv) return false;
    return true;
}
function checkServer(monitor, callback) {
    let start;
    let awaited;
    const topologyVersion = monitor.server.description.topologyVersion;
    const isAwaitable = useStreamingProtocol(monitor, topologyVersion);
    monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor.server.topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, isAwaitable));
    function onHeartbeatFailed(err) {
        var _monitor_connection;
        (_monitor_connection = monitor.connection) === null || _monitor_connection === void 0 ? void 0 : _monitor_connection.destroy();
        monitor.connection = null;
        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_FAILED, monitor.server.topology.s.id, undefined, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err, awaited));
        const error = !(err instanceof error_1.MongoError) ? new error_1.MongoError(error_1.MongoError.buildErrorMessage(err), {
            cause: err
        }) : err;
        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);
        if (error instanceof error_1.MongoNetworkTimeoutError) {
            error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);
        }
        monitor.emit('resetServer', error);
        callback(err);
    }
    function onHeartbeatSucceeded(hello) {
        if (!('isWritablePrimary' in hello)) {
            // Provide hello-style response document.
            hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];
        }
        var _monitor_rttPinger_latestRtt;
        // NOTE: here we use the latestRtt as this measurement corresponds with the value
        // obtained for this successful heartbeat, if there is no latestRtt, then we calculate the
        // duration
        const duration = isAwaitable && monitor.rttPinger ? (_monitor_rttPinger_latestRtt = monitor.rttPinger.latestRtt) !== null && _monitor_rttPinger_latestRtt !== void 0 ? _monitor_rttPinger_latestRtt : (0, utils_1.calculateDurationInMs)(start) : (0, utils_1.calculateDurationInMs)(start);
        monitor.addRttSample(duration);
        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor.server.topology.s.id, hello.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable));
        if (isAwaitable) {
            // If we are using the streaming protocol then we immediately issue another 'started'
            // event, otherwise the "check" is complete and return to the main monitor loop
            monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor.server.topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, true));
            // We have not actually sent an outgoing handshake, but when we get the next response we
            // want the duration to reflect the time since we last heard from the server
            start = (0, utils_1.now)();
        } else {
            var _monitor_rttPinger;
            (_monitor_rttPinger = monitor.rttPinger) === null || _monitor_rttPinger === void 0 ? void 0 : _monitor_rttPinger.close();
            monitor.rttPinger = undefined;
            callback(undefined, hello);
        }
    }
    const { connection } = monitor;
    if (connection && !connection.closed) {
        const { serverApi, helloOk } = connection;
        const connectTimeoutMS = monitor.options.connectTimeoutMS;
        const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;
        const cmd = {
            [(serverApi === null || serverApi === void 0 ? void 0 : serverApi.version) || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,
            ...isAwaitable && topologyVersion ? {
                maxAwaitTimeMS,
                topologyVersion: makeTopologyVersion(topologyVersion)
            } : {}
        };
        const options = isAwaitable ? {
            socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,
            exhaustAllowed: true
        } : {
            socketTimeoutMS: connectTimeoutMS
        };
        if (isAwaitable && monitor.rttPinger == null) {
            monitor.rttPinger = new RTTPinger(monitor);
        }
        // Record new start time before sending handshake
        start = (0, utils_1.now)();
        if (isAwaitable) {
            awaited = true;
            return connection.exhaustCommand((0, utils_1.ns)('admin.$cmd'), cmd, options, (error, hello)=>{
                if (error) return onHeartbeatFailed(error);
                return onHeartbeatSucceeded(hello);
            });
        }
        awaited = false;
        connection.command((0, utils_1.ns)('admin.$cmd'), cmd, options).then(onHeartbeatSucceeded, onHeartbeatFailed);
        return;
    }
    // connecting does an implicit `hello`
    (async ()=>{
        const socket = await (0, connect_1.makeSocket)(monitor.connectOptions);
        const connection = (0, connect_1.makeConnection)(monitor.connectOptions, socket);
        // The start time is after socket creation but before the handshake
        start = (0, utils_1.now)();
        try {
            await (0, connect_1.performInitialHandshake)(connection, monitor.connectOptions);
            return connection;
        } catch (error) {
            connection.destroy();
            throw error;
        }
    })().then((connection)=>{
        var _connection_hello, _connection_hello1;
        if (isInCloseState(monitor)) {
            connection.destroy();
            return;
        }
        const duration = (0, utils_1.calculateDurationInMs)(start);
        monitor.addRttSample(duration);
        monitor.connection = connection;
        monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor.server.topology.s.id, (_connection_hello = connection.hello) === null || _connection_hello === void 0 ? void 0 : _connection_hello.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, connection.hello, useStreamingProtocol(monitor, (_connection_hello1 = connection.hello) === null || _connection_hello1 === void 0 ? void 0 : _connection_hello1.topologyVersion)));
        callback(undefined, connection.hello);
    }, (error)=>{
        monitor.connection = null;
        awaited = false;
        onHeartbeatFailed(error);
    });
}
function monitorServer(monitor) {
    return (callback)=>{
        if (monitor.s.state === STATE_MONITORING) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].nextTick(callback);
            return;
        }
        stateTransition(monitor, STATE_MONITORING);
        function done() {
            if (!isInCloseState(monitor)) {
                stateTransition(monitor, STATE_IDLE);
            }
            callback();
        }
        checkServer(monitor, (err, hello)=>{
            if (err) {
                // otherwise an error occurred on initial discovery, also bail
                if (monitor.server.description.type === common_1.ServerType.Unknown) {
                    return done();
                }
            }
            // if the check indicates streaming is supported, immediately reschedule monitoring
            if (useStreamingProtocol(monitor, hello === null || hello === void 0 ? void 0 : hello.topologyVersion)) {
                (0, timers_1.setTimeout)(()=>{
                    if (!isInCloseState(monitor)) {
                        var _monitor_monitorId;
                        (_monitor_monitorId = monitor.monitorId) === null || _monitor_monitorId === void 0 ? void 0 : _monitor_monitorId.wake();
                    }
                }, 0);
            }
            done();
        });
    };
}
function makeTopologyVersion(tv) {
    return {
        processId: tv.processId,
        // tests mock counter as just number, but in a real situation counter should always be a Long
        // TODO(NODE-2674): Preserve int64 sent from MongoDB
        counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)
    };
}
/** @internal */ class RTTPinger {
    get roundTripTime() {
        return this.monitor.roundTripTime;
    }
    get minRoundTripTime() {
        return this.monitor.minRoundTripTime;
    }
    close() {
        var _this_connection;
        this.closed = true;
        (0, timers_1.clearTimeout)(this.monitorId);
        (_this_connection = this.connection) === null || _this_connection === void 0 ? void 0 : _this_connection.destroy();
        this.connection = undefined;
    }
    measureAndReschedule(start, conn) {
        if (this.closed) {
            conn === null || conn === void 0 ? void 0 : conn.destroy();
            return;
        }
        if (this.connection == null) {
            this.connection = conn;
        }
        this.latestRtt = (0, utils_1.calculateDurationInMs)(start);
        this.monitorId = (0, timers_1.setTimeout)(()=>this.measureRoundTripTime(), this.monitor.options.heartbeatFrequencyMS);
    }
    measureRoundTripTime() {
        var _connection_serverApi;
        const start = (0, utils_1.now)();
        if (this.closed) {
            return;
        }
        const connection = this.connection;
        if (connection == null) {
            (0, connect_1.connect)(this.monitor.connectOptions).then((connection)=>{
                this.measureAndReschedule(start, connection);
            }, ()=>{
                this.connection = undefined;
            });
            return;
        }
        const commandName = ((_connection_serverApi = connection.serverApi) === null || _connection_serverApi === void 0 ? void 0 : _connection_serverApi.version) || connection.helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND;
        connection.command((0, utils_1.ns)('admin.$cmd'), {
            [commandName]: 1
        }, undefined).then(()=>this.measureAndReschedule(start), ()=>{
            var _this_connection;
            (_this_connection = this.connection) === null || _this_connection === void 0 ? void 0 : _this_connection.destroy();
            this.connection = undefined;
            return;
        });
    }
    constructor(monitor){
        this.connection = undefined;
        this.cancellationToken = monitor.cancellationToken;
        this.closed = false;
        this.monitor = monitor;
        var _monitor_latestRtt;
        this.latestRtt = (_monitor_latestRtt = monitor.latestRtt) !== null && _monitor_latestRtt !== void 0 ? _monitor_latestRtt : undefined;
        const heartbeatFrequencyMS = monitor.options.heartbeatFrequencyMS;
        this.monitorId = (0, timers_1.setTimeout)(()=>this.measureRoundTripTime(), heartbeatFrequencyMS);
    }
}
exports.RTTPinger = RTTPinger;
/**
 * @internal
 */ class MonitorInterval {
    wake() {
        const currentTime = (0, utils_1.now)();
        const timeSinceLastCall = currentTime - this.lastExecutionEnded;
        // TODO(NODE-4674): Add error handling and logging to the monitor
        if (timeSinceLastCall < 0) {
            return this._executeAndReschedule();
        }
        if (this.isExecutionInProgress) {
            return;
        }
        // debounce multiple calls to wake within the `minInterval`
        if (this.isExpeditedCallToFnScheduled) {
            return;
        }
        // reschedule a call as soon as possible, ensuring the call never happens
        // faster than the `minInterval`
        if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {
            this.isExpeditedCallToFnScheduled = true;
            this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);
            return;
        }
        this._executeAndReschedule();
    }
    stop() {
        this.stopped = true;
        if (this.timerId) {
            (0, timers_1.clearTimeout)(this.timerId);
            this.timerId = undefined;
        }
        this.lastExecutionEnded = -Infinity;
        this.isExpeditedCallToFnScheduled = false;
    }
    toString() {
        return JSON.stringify(this);
    }
    toJSON() {
        const currentTime = (0, utils_1.now)();
        const timeSinceLastCall = currentTime - this.lastExecutionEnded;
        return {
            timerId: this.timerId != null ? 'set' : 'cleared',
            lastCallTime: this.lastExecutionEnded,
            isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,
            stopped: this.stopped,
            heartbeatFrequencyMS: this.heartbeatFrequencyMS,
            minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,
            currentTime,
            timeSinceLastCall
        };
    }
    _reschedule(ms) {
        if (this.stopped) return;
        if (this.timerId) {
            (0, timers_1.clearTimeout)(this.timerId);
        }
        this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);
    }
    constructor(fn, options = {}){
        this.isExpeditedCallToFnScheduled = false;
        this.stopped = false;
        this.isExecutionInProgress = false;
        this.hasExecutedOnce = false;
        this._executeAndReschedule = ()=>{
            if (this.stopped) return;
            if (this.timerId) {
                (0, timers_1.clearTimeout)(this.timerId);
            }
            this.isExpeditedCallToFnScheduled = false;
            this.isExecutionInProgress = true;
            this.fn(()=>{
                this.lastExecutionEnded = (0, utils_1.now)();
                this.isExecutionInProgress = false;
                this._reschedule(this.heartbeatFrequencyMS);
            });
        };
        this.fn = fn;
        this.lastExecutionEnded = -Infinity;
        var _options_heartbeatFrequencyMS;
        this.heartbeatFrequencyMS = (_options_heartbeatFrequencyMS = options.heartbeatFrequencyMS) !== null && _options_heartbeatFrequencyMS !== void 0 ? _options_heartbeatFrequencyMS : 1000;
        var _options_minHeartbeatFrequencyMS;
        this.minHeartbeatFrequencyMS = (_options_minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS) !== null && _options_minHeartbeatFrequencyMS !== void 0 ? _options_minHeartbeatFrequencyMS : 500;
        if (options.immediate) {
            this._executeAndReschedule();
        } else {
            this._reschedule(undefined);
        }
    }
}
exports.MonitorInterval = MonitorInterval;
/** @internal
 * This class implements the RTT sampling logic specified for [CSOT](https://github.com/mongodb/specifications/blob/bbb335e60cd7ea1e0f7cd9a9443cb95fc9d3b64d/source/client-side-operations-timeout/client-side-operations-timeout.md#drivers-use-minimum-rtt-to-short-circuit-operations)
 *
 * This is implemented as a [circular buffer](https://en.wikipedia.org/wiki/Circular_buffer) keeping
 * the most recent `windowSize` samples
 * */ class RTTSampler {
    /**
     * Adds an rtt sample to the end of the circular buffer
     * When `windowSize` samples have been collected, `addSample` overwrites the least recently added
     * sample
     */ addSample(sample) {
        this.rttSamples[this.writeIndex++] = sample;
        if (this.length < this.rttSamples.length) {
            this.length++;
        }
        this.writeIndex %= this.rttSamples.length;
    }
    /**
     * When \< 2 samples have been collected, returns 0
     * Otherwise computes the minimum value samples contained in the buffer
     */ min() {
        if (this.length < 2) return 0;
        let min = this.rttSamples[0];
        for(let i = 1; i < this.length; i++){
            if (this.rttSamples[i] < min) min = this.rttSamples[i];
        }
        return min;
    }
    /**
     * Returns mean of samples contained in the buffer
     */ average() {
        if (this.length === 0) return 0;
        let sum = 0;
        for(let i = 0; i < this.length; i++){
            sum += this.rttSamples[i];
        }
        return sum / this.length;
    }
    /**
     * Returns most recently inserted element in the buffer
     * Returns null if the buffer is empty
     * */ get last() {
        if (this.length === 0) return null;
        return this.rttSamples[this.writeIndex === 0 ? this.length - 1 : this.writeIndex - 1];
    }
    /**
     * Clear the buffer
     * NOTE: this does not overwrite the data held in the internal array, just the pointers into
     * this array
     */ clear() {
        this.length = 0;
        this.writeIndex = 0;
    }
    constructor(windowSize = 10){
        this.rttSamples = new Float64Array(windowSize);
        this.length = 0;
        this.writeIndex = 0;
    }
}
exports.RTTSampler = RTTSampler; //# sourceMappingURL=monitor.js.map
}),
"[project]/node_modules/mongodb/lib/sdam/server_selection_events.js [app-client] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WaitingForSuitableServerEvent = exports.ServerSelectionSucceededEvent = exports.ServerSelectionFailedEvent = exports.ServerSelectionStartedEvent = exports.ServerSelectionEvent = void 0;
const utils_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/utils.js [app-client] (ecmascript)");
const constants_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/constants.js [app-client] (ecmascript)");
/**
 * The base export class for all logs published from server selection
 * @internal
 * @category Log Type
 */ class ServerSelectionEvent {
    /** @internal */ constructor(selector, topologyDescription, operation){
        this.selector = selector;
        this.operation = operation;
        this.topologyDescription = topologyDescription;
    }
}
exports.ServerSelectionEvent = ServerSelectionEvent;
/**
 * An event published when server selection starts
 * @internal
 * @category Event
 */ class ServerSelectionStartedEvent extends ServerSelectionEvent {
    /** @internal */ constructor(selector, topologyDescription, operation){
        super(selector, topologyDescription, operation);
        /** @internal */ this.name = constants_1.SERVER_SELECTION_STARTED;
        this.message = 'Server selection started';
    }
}
exports.ServerSelectionStartedEvent = ServerSelectionStartedEvent;
/**
 * An event published when a server selection fails
 * @internal
 * @category Event
 */ class ServerSelectionFailedEvent extends ServerSelectionEvent {
    /** @internal */ constructor(selector, topologyDescription, error, operation){
        super(selector, topologyDescription, operation);
        /** @internal */ this.name = constants_1.SERVER_SELECTION_FAILED;
        this.message = 'Server selection failed';
        this.failure = error;
    }
}
exports.ServerSelectionFailedEvent = ServerSelectionFailedEvent;
/**
 * An event published when server selection succeeds
 * @internal
 * @category Event
 */ class ServerSelectionSucceededEvent extends ServerSelectionEvent {
    /** @internal */ constructor(selector, topologyDescription, address, operation){
        super(selector, topologyDescription, operation);
        /** @internal */ this.name = constants_1.SERVER_SELECTION_SUCCEEDED;
        this.message = 'Server selection succeeded';
        const { host, port } = utils_1.HostAddress.fromString(address).toHostPort();
        this.serverHost = host;
        this.serverPort = port;
    }
}
exports.ServerSelectionSucceededEvent = ServerSelectionSucceededEvent;
/**
 * An event published when server selection is waiting for a suitable server to become available
 * @internal
 * @category Event
 */ class WaitingForSuitableServerEvent extends ServerSelectionEvent {
    /** @internal */ constructor(selector, topologyDescription, remainingTimeMS, operation){
        super(selector, topologyDescription, operation);
        /** @internal */ this.name = constants_1.WAITING_FOR_SUITABLE_SERVER;
        this.message = 'Waiting for suitable server to become available';
        this.remainingTimeMS = remainingTimeMS;
    }
}
exports.WaitingForSuitableServerEvent = WaitingForSuitableServerEvent; //# sourceMappingURL=server_selection_events.js.map
}),
"[project]/node_modules/mongodb/lib/sdam/srv_polling.js [app-client] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SrvPoller = exports.SrvPollingEvent = void 0;
const dns = (()=>{
    const e = new Error("Cannot find module 'dns'");
    e.code = 'MODULE_NOT_FOUND';
    throw e;
})();
const timers_1 = __turbopack_context__.r("[project]/node_modules/next/dist/compiled/timers-browserify/main.js [app-client] (ecmascript)");
const error_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/error.js [app-client] (ecmascript)");
const mongo_types_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/mongo_types.js [app-client] (ecmascript)");
const utils_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/utils.js [app-client] (ecmascript)");
/**
 * @internal
 * @category Event
 */ class SrvPollingEvent {
    hostnames() {
        return new Set(this.srvRecords.map((r)=>utils_1.HostAddress.fromSrvRecord(r).toString()));
    }
    constructor(srvRecords){
        this.srvRecords = srvRecords;
    }
}
exports.SrvPollingEvent = SrvPollingEvent;
/** @internal */ class SrvPoller extends mongo_types_1.TypedEventEmitter {
    get srvAddress() {
        return "_".concat(this.srvServiceName, "._tcp.").concat(this.srvHost);
    }
    get intervalMS() {
        return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;
    }
    start() {
        if (!this._timeout) {
            this.schedule();
        }
    }
    stop() {
        if (this._timeout) {
            (0, timers_1.clearTimeout)(this._timeout);
            this.generation += 1;
            this._timeout = undefined;
        }
    }
    // TODO(NODE-4994): implement new logging logic for SrvPoller failures
    schedule() {
        if (this._timeout) {
            (0, timers_1.clearTimeout)(this._timeout);
        }
        this._timeout = (0, timers_1.setTimeout)(()=>{
            this._poll().then(undefined, utils_1.squashError);
        }, this.intervalMS);
    }
    success(srvRecords) {
        this.haMode = false;
        this.schedule();
        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));
    }
    failure() {
        this.haMode = true;
        this.schedule();
    }
    async _poll() {
        const generation = this.generation;
        let srvRecords;
        try {
            srvRecords = await dns.promises.resolveSrv(this.srvAddress);
        } catch (e) {
            this.failure();
            return;
        }
        if (generation !== this.generation) {
            return;
        }
        const finalAddresses = [];
        for (const record of srvRecords){
            try {
                (0, utils_1.checkParentDomainMatch)(record.name, this.srvHost);
                finalAddresses.push(record);
            } catch (error) {
                (0, utils_1.squashError)(error);
            }
        }
        if (!finalAddresses.length) {
            this.failure();
            return;
        }
        this.success(finalAddresses);
    }
    constructor(options){
        super();
        this.on('error', utils_1.noop);
        if (!options || !options.srvHost) {
            throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');
        }
        this.srvHost = options.srvHost;
        var _options_srvMaxHosts;
        this.srvMaxHosts = (_options_srvMaxHosts = options.srvMaxHosts) !== null && _options_srvMaxHosts !== void 0 ? _options_srvMaxHosts : 0;
        var _options_srvServiceName;
        this.srvServiceName = (_options_srvServiceName = options.srvServiceName) !== null && _options_srvServiceName !== void 0 ? _options_srvServiceName : 'mongodb';
        this.rescanSrvIntervalMS = 60000;
        var _options_heartbeatFrequencyMS;
        this.heartbeatFrequencyMS = (_options_heartbeatFrequencyMS = options.heartbeatFrequencyMS) !== null && _options_heartbeatFrequencyMS !== void 0 ? _options_heartbeatFrequencyMS : 10000;
        this.haMode = false;
        this.generation = 0;
        this._timeout = undefined;
    }
}
exports.SrvPoller = SrvPoller;
/** @event */ SrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery'; //# sourceMappingURL=srv_polling.js.map
}),
"[project]/node_modules/mongodb/lib/sdam/topology.js [app-client] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = /*#__PURE__*/ __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServerCapabilities = exports.Topology = void 0;
const connection_string_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/connection_string.js [app-client] (ecmascript)");
const constants_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/constants.js [app-client] (ecmascript)");
const error_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/error.js [app-client] (ecmascript)");
const mongo_logger_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/mongo_logger.js [app-client] (ecmascript)");
const mongo_types_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/mongo_types.js [app-client] (ecmascript)");
const read_preference_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/read_preference.js [app-client] (ecmascript)");
const timeout_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/timeout.js [app-client] (ecmascript)");
const utils_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/utils.js [app-client] (ecmascript)");
const common_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/common.js [app-client] (ecmascript)");
const events_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/events.js [app-client] (ecmascript)");
const server_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/server.js [app-client] (ecmascript)");
const server_description_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/server_description.js [app-client] (ecmascript)");
const server_selection_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/server_selection.js [app-client] (ecmascript)");
const server_selection_events_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/server_selection_events.js [app-client] (ecmascript)");
const srv_polling_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/srv_polling.js [app-client] (ecmascript)");
const topology_description_1 = __turbopack_context__.r("[project]/node_modules/mongodb/lib/sdam/topology_description.js [app-client] (ecmascript)");
// Global state
let globalTopologyCounter = 0;
const stateTransition = (0, utils_1.makeStateMachine)({
    [common_1.STATE_CLOSED]: [
        common_1.STATE_CLOSED,
        common_1.STATE_CONNECTING
    ],
    [common_1.STATE_CONNECTING]: [
        common_1.STATE_CONNECTING,
        common_1.STATE_CLOSING,
        common_1.STATE_CONNECTED,
        common_1.STATE_CLOSED
    ],
    [common_1.STATE_CONNECTED]: [
        common_1.STATE_CONNECTED,
        common_1.STATE_CLOSING,
        common_1.STATE_CLOSED
    ],
    [common_1.STATE_CLOSING]: [
        common_1.STATE_CLOSING,
        common_1.STATE_CLOSED
    ]
});
/**
 * A container of server instances representing a connection to a MongoDB topology.
 * @internal
 */ class Topology extends mongo_types_1.TypedEventEmitter {
    detectShardedTopology(event) {
        var _this_s_srvPoller;
        const previousType = event.previousDescription.type;
        const newType = event.newDescription.type;
        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;
        const srvListeners = (_this_s_srvPoller = this.s.srvPoller) === null || _this_s_srvPoller === void 0 ? void 0 : _this_s_srvPoller.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);
        const listeningToSrvPolling = !!(srvListeners === null || srvListeners === void 0 ? void 0 : srvListeners.includes(this.s.detectSrvRecords));
        if (transitionToSharded && !listeningToSrvPolling) {
            var _this_s_srvPoller1, _this_s_srvPoller2;
            (_this_s_srvPoller1 = this.s.srvPoller) === null || _this_s_srvPoller1 === void 0 ? void 0 : _this_s_srvPoller1.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);
            (_this_s_srvPoller2 = this.s.srvPoller) === null || _this_s_srvPoller2 === void 0 ? void 0 : _this_s_srvPoller2.start();
        }
    }
    detectSrvRecords(ev) {
        const previousTopologyDescription = this.s.description;
        this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);
        if (this.s.description === previousTopologyDescription) {
            // Nothing changed, so return
            return;
        }
        updateServers(this);
        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));
    }
    /**
     * @returns A `TopologyDescription` for this topology
     */ get description() {
        return this.s.description;
    }
    get loadBalanced() {
        return this.s.options.loadBalanced;
    }
    get serverApi() {
        return this.s.options.serverApi;
    }
    get capabilities() {
        return new ServerCapabilities(this.lastHello());
    }
    /** Initiate server connect */ async connect(options) {
        var _this_connectionLock;
        (_this_connectionLock = this.connectionLock) !== null && _this_connectionLock !== void 0 ? _this_connectionLock : this.connectionLock = this._connect(options);
        try {
            await this.connectionLock;
            return this;
        } finally{
            this.connectionLock = undefined;
        }
    }
    async _connect(options) {
        options = options !== null && options !== void 0 ? options : {};
        if (this.s.state === common_1.STATE_CONNECTED) {
            return this;
        }
        stateTransition(this, common_1.STATE_CONNECTING);
        // emit SDAM monitoring events
        this.emitAndLog(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));
        // emit an event for the topology change
        this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), this.s.description));
        // connect all known servers, then attempt server selection to connect
        const serverDescriptions = Array.from(this.s.description.servers.values());
        this.s.servers = new Map(serverDescriptions.map((serverDescription)=>[
                serverDescription.address,
                createAndConnectServer(this, serverDescription)
            ]));
        // In load balancer mode we need to fake a server description getting
        // emitted from the monitor, since the monitor doesn't exist.
        if (this.s.options.loadBalanced) {
            for (const description of serverDescriptions){
                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {
                    loadBalanced: this.s.options.loadBalanced
                });
                this.serverUpdateHandler(newDescription);
            }
        }
        const serverSelectionTimeoutMS = this.client.s.options.serverSelectionTimeoutMS;
        var _options_readPreference;
        const readPreference = (_options_readPreference = options.readPreference) !== null && _options_readPreference !== void 0 ? _options_readPreference : read_preference_1.ReadPreference.primary;
        const timeoutContext = timeout_1.TimeoutContext.create({
            // TODO(NODE-6448): auto-connect ignores timeoutMS; potential future feature
            timeoutMS: undefined,
            serverSelectionTimeoutMS,
            waitQueueTimeoutMS: this.client.s.options.waitQueueTimeoutMS
        });
        const selectServerOptions = {
            operationName: 'ping',
            ...options,
            timeoutContext
        };
        try {
            const server = await this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), selectServerOptions);
            const skipPingOnConnect = this.s.options.__skipPingOnConnect === true;
            if (!skipPingOnConnect && this.s.credentials) {
                await server.command((0, utils_1.ns)('admin.$cmd'), {
                    ping: 1
                }, {
                    timeoutContext
                });
                stateTransition(this, common_1.STATE_CONNECTED);
                this.emit(Topology.OPEN, this);
                this.emit(Topology.CONNECT, this);
                return this;
            }
            stateTransition(this, common_1.STATE_CONNECTED);
            this.emit(Topology.OPEN, this);
            this.emit(Topology.CONNECT, this);
            return this;
        } catch (error) {
            this.close();
            throw error;
        }
    }
    closeCheckedOutConnections() {
        for (const server of this.s.servers.values()){
            return server.closeCheckedOutConnections();
        }
    }
    /** Close this topology */ close() {
        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {
            return;
        }
        for (const server of this.s.servers.values()){
            closeServer(server, this);
        }
        this.s.servers.clear();
        stateTransition(this, common_1.STATE_CLOSING);
        drainWaitQueue(this.waitQueue, new error_1.MongoTopologyClosedError());
        if (this.s.srvPoller) {
            this.s.srvPoller.stop();
            this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);
        }
        this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);
        stateTransition(this, common_1.STATE_CLOSED);
        // emit an event for close
        this.emitAndLog(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));
    }
    /**
     * Selects a server according to the selection predicate provided
     *
     * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window
     * @param options - Optional settings related to server selection
     * @param callback - The callback used to indicate success or failure
     * @returns An instance of a `Server` meeting the criteria of the predicate provided
     */ async selectServer(selector, options) {
        var _this_client_mongoLogger;
        let serverSelector;
        if (typeof selector !== 'function') {
            if (typeof selector === 'string') {
                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));
            } else {
                let readPreference;
                if (selector instanceof read_preference_1.ReadPreference) {
                    readPreference = selector;
                } else {
                    read_preference_1.ReadPreference.translate(options);
                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;
                }
                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);
            }
        } else {
            serverSelector = selector;
        }
        options = {
            serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS,
            ...options
        };
        if ((_this_client_mongoLogger = this.client.mongoLogger) === null || _this_client_mongoLogger === void 0 ? void 0 : _this_client_mongoLogger.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {
            var _this_client_mongoLogger1;
            (_this_client_mongoLogger1 = this.client.mongoLogger) === null || _this_client_mongoLogger1 === void 0 ? void 0 : _this_client_mongoLogger1.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionStartedEvent(selector, this.description, options.operationName));
        }
        let timeout;
        if (options.timeoutContext) timeout = options.timeoutContext.serverSelectionTimeout;
        else {
            var _options_serverSelectionTimeoutMS;
            timeout = timeout_1.Timeout.expires((_options_serverSelectionTimeoutMS = options.serverSelectionTimeoutMS) !== null && _options_serverSelectionTimeoutMS !== void 0 ? _options_serverSelectionTimeoutMS : 0);
        }
        const isSharded = this.description.type === common_1.TopologyType.Sharded;
        const session = options.session;
        const transaction = session && session.transaction;
        if (isSharded && transaction && transaction.server) {
            var _this_client_mongoLogger2, _options_timeoutContext;
            if ((_this_client_mongoLogger2 = this.client.mongoLogger) === null || _this_client_mongoLogger2 === void 0 ? void 0 : _this_client_mongoLogger2.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {
                var _this_client_mongoLogger3;
                (_this_client_mongoLogger3 = this.client.mongoLogger) === null || _this_client_mongoLogger3 === void 0 ? void 0 : _this_client_mongoLogger3.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(selector, this.description, transaction.server.pool.address, options.operationName));
            }
            if ((_options_timeoutContext = options.timeoutContext) === null || _options_timeoutContext === void 0 ? void 0 : _options_timeoutContext.clearServerSelectionTimeout) timeout === null || timeout === void 0 ? void 0 : timeout.clear();
            return transaction.server;
        }
        const { promise: serverPromise, resolve, reject } = (0, utils_1.promiseWithResolvers)();
        const waitQueueMember = {
            serverSelector,
            topologyDescription: this.description,
            mongoLogger: this.client.mongoLogger,
            transaction,
            resolve,
            reject,
            cancelled: false,
            startTime: (0, utils_1.now)(),
            operationName: options.operationName,
            waitingLogged: false,
            previousServer: options.previousServer
        };
        const abortListener = (0, utils_1.addAbortListener)(options.signal, function() {
            waitQueueMember.cancelled = true;
            reject(this.reason);
        });
        this.waitQueue.push(waitQueueMember);
        processWaitQueue(this);
        try {
            var _options_timeoutContext1;
            timeout === null || timeout === void 0 ? void 0 : timeout.throwIfExpired();
            const server = await (timeout ? Promise.race([
                serverPromise,
                timeout
            ]) : serverPromise);
            if (((_options_timeoutContext1 = options.timeoutContext) === null || _options_timeoutContext1 === void 0 ? void 0 : _options_timeoutContext1.csotEnabled()) && server.description.minRoundTripTime !== 0) {
                options.timeoutContext.minRoundTripTime = server.description.minRoundTripTime;
            }
            return server;
        } catch (error) {
            if (timeout_1.TimeoutError.is(error)) {
                var _this_client_mongoLogger4, _options_timeoutContext2;
                // Timeout
                waitQueueMember.cancelled = true;
                const timeoutError = new error_1.MongoServerSelectionError("Server selection timed out after ".concat(timeout === null || timeout === void 0 ? void 0 : timeout.duration, " ms"), this.description);
                if ((_this_client_mongoLogger4 = this.client.mongoLogger) === null || _this_client_mongoLogger4 === void 0 ? void 0 : _this_client_mongoLogger4.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {
                    var _this_client_mongoLogger5;
                    (_this_client_mongoLogger5 = this.client.mongoLogger) === null || _this_client_mongoLogger5 === void 0 ? void 0 : _this_client_mongoLogger5.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(selector, this.description, timeoutError, options.operationName));
                }
                if ((_options_timeoutContext2 = options.timeoutContext) === null || _options_timeoutContext2 === void 0 ? void 0 : _options_timeoutContext2.csotEnabled()) {
                    throw new error_1.MongoOperationTimeoutError('Timed out during server selection', {
                        cause: timeoutError
                    });
                }
                throw timeoutError;
            }
            // Other server selection error
            throw error;
        } finally{
            var _options_timeoutContext3;
            abortListener === null || abortListener === void 0 ? void 0 : abortListener[utils_1.kDispose]();
            if ((_options_timeoutContext3 = options.timeoutContext) === null || _options_timeoutContext3 === void 0 ? void 0 : _options_timeoutContext3.clearServerSelectionTimeout) timeout === null || timeout === void 0 ? void 0 : timeout.clear();
        }
    }
    /**
     * Update the internal TopologyDescription with a ServerDescription
     *
     * @param serverDescription - The server to update in the internal list of server descriptions
     */ serverUpdateHandler(serverDescription) {
        if (!this.s.description.hasServer(serverDescription.address)) {
            return;
        }
        // ignore this server update if its from an outdated topologyVersion
        if (isStaleServerDescription(this.s.description, serverDescription)) {
            return;
        }
        // these will be used for monitoring events later
        const previousTopologyDescription = this.s.description;
        const previousServerDescription = this.s.description.servers.get(serverDescription.address);
        if (!previousServerDescription) {
            return;
        }
        // Driver Sessions Spec: "Whenever a driver receives a cluster time from
        // a server it MUST compare it to the current highest seen cluster time
        // for the deployment. If the new cluster time is higher than the
        // highest seen cluster time it MUST become the new highest seen cluster
        // time. Two cluster times are compared using only the BsonTimestamp
        // value of the clusterTime embedded field."
        const clusterTime = serverDescription.$clusterTime;
        if (clusterTime) {
            (0, common_1._advanceClusterTime)(this, clusterTime);
        }
        // If we already know all the information contained in this updated description, then
        // we don't need to emit SDAM events, but still need to update the description, in order
        // to keep client-tracked attributes like last update time and round trip time up to date
        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);
        // first update the TopologyDescription
        this.s.description = this.s.description.update(serverDescription);
        if (this.s.description.compatibilityError) {
            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));
            return;
        }
        // emit monitoring events for this change
        if (!equalDescriptions) {
            const newDescription = this.s.description.servers.get(serverDescription.address);
            if (newDescription) {
                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));
            }
        }
        // update server list from updated descriptions
        updateServers(this, serverDescription);
        // attempt to resolve any outstanding server selection attempts
        if (this.waitQueue.length > 0) {
            processWaitQueue(this);
        }
        if (!equalDescriptions) {
            this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));
        }
    }
    auth(credentials, callback) {
        if (typeof credentials === 'function') callback = credentials, credentials = undefined;
        if (typeof callback === 'function') callback(undefined, true);
    }
    get clientMetadata() {
        return this.s.options.metadata;
    }
    isConnected() {
        return this.s.state === common_1.STATE_CONNECTED;
    }
    isDestroyed() {
        return this.s.state === common_1.STATE_CLOSED;
    }
    // NOTE: There are many places in code where we explicitly check the last hello
    //       to do feature support detection. This should be done any other way, but for
    //       now we will just return the first hello seen, which should suffice.
    lastHello() {
        const serverDescriptions = Array.from(this.description.servers.values());
        if (serverDescriptions.length === 0) return {};
        const sd = serverDescriptions.filter((sd)=>sd.type !== common_1.ServerType.Unknown)[0];
        const result = sd || {
            maxWireVersion: this.description.commonWireVersion
        };
        return result;
    }
    get commonWireVersion() {
        return this.description.commonWireVersion;
    }
    get logicalSessionTimeoutMinutes() {
        return this.description.logicalSessionTimeoutMinutes;
    }
    get clusterTime() {
        return this.s.clusterTime;
    }
    set clusterTime(clusterTime) {
        this.s.clusterTime = clusterTime;
    }
    /**
     * @param seedlist - a list of HostAddress instances to connect to
     */ constructor(client, seeds, options){
        super();
        this.on('error', utils_1.noop);
        this.client = client;
        // Options should only be undefined in tests, MongoClient will always have defined options
        options = options !== null && options !== void 0 ? options : {
            hosts: [
                utils_1.HostAddress.fromString('localhost:27017')
            ],
            ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries())
        };
        if (typeof seeds === 'string') {
            seeds = [
                utils_1.HostAddress.fromString(seeds)
            ];
        } else if (!Array.isArray(seeds)) {
            seeds = [
                seeds
            ];
        }
        const seedlist = [];
        for (const seed of seeds){
            if (typeof seed === 'string') {
                seedlist.push(utils_1.HostAddress.fromString(seed));
            } else if (seed instanceof utils_1.HostAddress) {
                seedlist.push(seed);
            } else {
                // FIXME(NODE-3483): May need to be a MongoParseError
                throw new error_1.MongoRuntimeError("Topology cannot be constructed from ".concat(JSON.stringify(seed)));
            }
        }
        const topologyType = topologyTypeFromOptions(options);
        const topologyId = globalTopologyCounter++;
        const selectedHosts = options.srvMaxHosts == null || options.srvMaxHosts === 0 || options.srvMaxHosts >= seedlist.length ? seedlist : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);
        const serverDescriptions = new Map();
        for (const hostAddress of selectedHosts){
            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));
        }
        this.waitQueue = new utils_1.List();
        this.s = {
            // the id of this topology
            id: topologyId,
            // passed in options
            options,
            // initial seedlist of servers to connect to
            seedlist,
            // initial state
            state: common_1.STATE_CLOSED,
            // the topology description
            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),
            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,
            heartbeatFrequencyMS: options.heartbeatFrequencyMS,
            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,
            // a map of server instances to normalized addresses
            servers: new Map(),
            credentials: options === null || options === void 0 ? void 0 : options.credentials,
            clusterTime: undefined,
            detectShardedTopology: (ev)=>this.detectShardedTopology(ev),
            detectSrvRecords: (ev)=>this.detectSrvRecords(ev)
        };
        this.mongoLogger = client.mongoLogger;
        this.component = 'topology';
        if (options.srvHost && !options.loadBalanced) {
            var _options_srvPoller;
            this.s.srvPoller = (_options_srvPoller = options.srvPoller) !== null && _options_srvPoller !== void 0 ? _options_srvPoller : new srv_polling_1.SrvPoller({
                heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,
                srvHost: options.srvHost,
                srvMaxHosts: options.srvMaxHosts,
                srvServiceName: options.srvServiceName
            });
            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);
        }
        this.connectionLock = undefined;
    }
}
exports.Topology = Topology;
/** @event */ Topology.SERVER_OPENING = constants_1.SERVER_OPENING;
/** @event */ Topology.SERVER_CLOSED = constants_1.SERVER_CLOSED;
/** @event */ Topology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;
/** @event */ Topology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;
/** @event */ Topology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;
/** @event */ Topology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;
/** @event */ Topology.ERROR = constants_1.ERROR;
/** @event */ Topology.OPEN = constants_1.OPEN;
/** @event */ Topology.CONNECT = constants_1.CONNECT;
/** @event */ Topology.CLOSE = constants_1.CLOSE;
/** @event */ Topology.TIMEOUT = constants_1.TIMEOUT;
/** Destroys a server, and removes all event listeners from the instance */ function closeServer(server, topology) {
    for (const event of constants_1.LOCAL_SERVER_EVENTS){
        server.removeAllListeners(event);
    }
    server.close();
    topology.emitAndLog(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));
    for (const event of constants_1.SERVER_RELAY_EVENTS){
        server.removeAllListeners(event);
    }
}
/** Predicts the TopologyType from options */ function topologyTypeFromOptions(options) {
    if (options === null || options === void 0 ? void 0 : options.directConnection) {
        return common_1.TopologyType.Single;
    }
    if (options === null || options === void 0 ? void 0 : options.replicaSet) {
        return common_1.TopologyType.ReplicaSetNoPrimary;
    }
    if (options === null || options === void 0 ? void 0 : options.loadBalanced) {
        return common_1.TopologyType.LoadBalanced;
    }
    return common_1.TopologyType.Unknown;
}
/**
 * Creates new server instances and attempts to connect them
 *
 * @param topology - The topology that this server belongs to
 * @param serverDescription - The description for the server to initialize and connect to
 */ function createAndConnectServer(topology, serverDescription) {
    topology.emitAndLog(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));
    const server = new server_1.Server(topology, serverDescription, topology.s.options);
    for (const event of constants_1.SERVER_RELAY_EVENTS){
        server.on(event, (e)=>topology.emit(event, e));
    }
    server.on(server_1.Server.DESCRIPTION_RECEIVED, (description)=>topology.serverUpdateHandler(description));
    server.connect();
    return server;
}
/**
 * @param topology - Topology to update.
 * @param incomingServerDescription - New server description.
 */ function updateServers(topology, incomingServerDescription) {
    // update the internal server's description
    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {
        const server = topology.s.servers.get(incomingServerDescription.address);
        if (server) {
            server.s.description = incomingServerDescription;
            if (incomingServerDescription.error instanceof error_1.MongoError && incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {
                const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);
                server.pool.clear({
                    interruptInUseConnections
                });
            } else if (incomingServerDescription.error == null) {
                const newTopologyType = topology.s.description.type;
                const shouldMarkPoolReady = incomingServerDescription.isDataBearing || incomingServerDescription.type !== common_1.ServerType.Unknown && newTopologyType === common_1.TopologyType.Single;
                if (shouldMarkPoolReady) {
                    server.pool.ready();
                }
            }
        }
    }
    // add new servers for all descriptions we currently don't know about locally
    for (const serverDescription of topology.description.servers.values()){
        if (!topology.s.servers.has(serverDescription.address)) {
            const server = createAndConnectServer(topology, serverDescription);
            topology.s.servers.set(serverDescription.address, server);
        }
    }
    // for all servers no longer known, remove their descriptions and destroy their instances
    for (const entry of topology.s.servers){
        const serverAddress = entry[0];
        if (topology.description.hasServer(serverAddress)) {
            continue;
        }
        if (!topology.s.servers.has(serverAddress)) {
            continue;
        }
        const server = topology.s.servers.get(serverAddress);
        topology.s.servers.delete(serverAddress);
        // prepare server for garbage collection
        if (server) {
            closeServer(server, topology);
        }
    }
}
function drainWaitQueue(queue, drainError) {
    while(queue.length){
        const waitQueueMember = queue.shift();
        if (!waitQueueMember) {
            continue;
        }
        if (!waitQueueMember.cancelled) {
            var _waitQueueMember_mongoLogger;
            if ((_waitQueueMember_mongoLogger = waitQueueMember.mongoLogger) === null || _waitQueueMember_mongoLogger === void 0 ? void 0 : _waitQueueMember_mongoLogger.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {
                var _waitQueueMember_mongoLogger1;
                (_waitQueueMember_mongoLogger1 = waitQueueMember.mongoLogger) === null || _waitQueueMember_mongoLogger1 === void 0 ? void 0 : _waitQueueMember_mongoLogger1.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, drainError, waitQueueMember.operationName));
            }
            waitQueueMember.reject(drainError);
        }
    }
}
function processWaitQueue(topology) {
    if (topology.s.state === common_1.STATE_CLOSED) {
        drainWaitQueue(topology.waitQueue, new error_1.MongoTopologyClosedError());
        return;
    }
    const isSharded = topology.description.type === common_1.TopologyType.Sharded;
    const serverDescriptions = Array.from(topology.description.servers.values());
    const membersToProcess = topology.waitQueue.length;
    for(let i = 0; i < membersToProcess; ++i){
        var _topology_client_mongoLogger;
        const waitQueueMember = topology.waitQueue.shift();
        if (!waitQueueMember) {
            continue;
        }
        if (waitQueueMember.cancelled) {
            continue;
        }
        let selectedDescriptions;
        try {
            const serverSelector = waitQueueMember.serverSelector;
            const previousServer = waitQueueMember.previousServer;
            selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions, previousServer ? [
                previousServer
            ] : []) : serverDescriptions;
        } catch (selectorError) {
            var _topology_client_mongoLogger1;
            if ((_topology_client_mongoLogger1 = topology.client.mongoLogger) === null || _topology_client_mongoLogger1 === void 0 ? void 0 : _topology_client_mongoLogger1.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {
                var _topology_client_mongoLogger2;
                (_topology_client_mongoLogger2 = topology.client.mongoLogger) === null || _topology_client_mongoLogger2 === void 0 ? void 0 : _topology_client_mongoLogger2.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, selectorError, waitQueueMember.operationName));
            }
            waitQueueMember.reject(selectorError);
            continue;
        }
        let selectedServer;
        if (selectedDescriptions.length === 0) {
            if (!waitQueueMember.waitingLogged) {
                var _topology_client_mongoLogger3;
                if ((_topology_client_mongoLogger3 = topology.client.mongoLogger) === null || _topology_client_mongoLogger3 === void 0 ? void 0 : _topology_client_mongoLogger3.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.INFORMATIONAL)) {
                    var _topology_client_mongoLogger4;
                    (_topology_client_mongoLogger4 = topology.client.mongoLogger) === null || _topology_client_mongoLogger4 === void 0 ? void 0 : _topology_client_mongoLogger4.info(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.WaitingForSuitableServerEvent(waitQueueMember.serverSelector, topology.description, topology.s.serverSelectionTimeoutMS !== 0 ? topology.s.serverSelectionTimeoutMS - ((0, utils_1.now)() - waitQueueMember.startTime) : -1, waitQueueMember.operationName));
                }
                waitQueueMember.waitingLogged = true;
            }
            topology.waitQueue.push(waitQueueMember);
            continue;
        } else if (selectedDescriptions.length === 1) {
            selectedServer = topology.s.servers.get(selectedDescriptions[0].address);
        } else {
            const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);
            const server1 = topology.s.servers.get(descriptions[0].address);
            const server2 = topology.s.servers.get(descriptions[1].address);
            selectedServer = server1 && server2 && server1.s.operationCount < server2.s.operationCount ? server1 : server2;
        }
        if (!selectedServer) {
            var _topology_client_mongoLogger5;
            const serverSelectionError = new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description);
            if ((_topology_client_mongoLogger5 = topology.client.mongoLogger) === null || _topology_client_mongoLogger5 === void 0 ? void 0 : _topology_client_mongoLogger5.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {
                var _topology_client_mongoLogger6;
                (_topology_client_mongoLogger6 = topology.client.mongoLogger) === null || _topology_client_mongoLogger6 === void 0 ? void 0 : _topology_client_mongoLogger6.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, serverSelectionError, waitQueueMember.operationName));
            }
            waitQueueMember.reject(serverSelectionError);
            return;
        }
        const transaction = waitQueueMember.transaction;
        if (isSharded && transaction && transaction.isActive && selectedServer) {
            transaction.pinServer(selectedServer);
        }
        if ((_topology_client_mongoLogger = topology.client.mongoLogger) === null || _topology_client_mongoLogger === void 0 ? void 0 : _topology_client_mongoLogger.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {
            var _topology_client_mongoLogger7;
            (_topology_client_mongoLogger7 = topology.client.mongoLogger) === null || _topology_client_mongoLogger7 === void 0 ? void 0 : _topology_client_mongoLogger7.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, selectedServer.pool.address, waitQueueMember.operationName));
        }
        waitQueueMember.resolve(selectedServer);
    }
    if (topology.waitQueue.length > 0) {
        // ensure all server monitors attempt monitoring soon
        for (const [, server] of topology.s.servers){
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].nextTick(function scheduleServerCheck() {
                return server.requestCheck();
            });
        }
    }
}
function isStaleServerDescription(topologyDescription, incomingServerDescription) {
    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);
    const currentTopologyVersion = currentServerDescription === null || currentServerDescription === void 0 ? void 0 : currentServerDescription.topologyVersion;
    return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;
}
/** @public */ class ServerCapabilities {
    get hasAggregationCursor() {
        return this.maxWireVersion >= 1;
    }
    get hasWriteCommands() {
        return this.maxWireVersion >= 2;
    }
    get hasTextSearch() {
        return this.minWireVersion >= 0;
    }
    get hasAuthCommands() {
        return this.maxWireVersion >= 1;
    }
    get hasListCollectionsCommand() {
        return this.maxWireVersion >= 3;
    }
    get hasListIndexesCommand() {
        return this.maxWireVersion >= 3;
    }
    get supportsSnapshotReads() {
        return this.maxWireVersion >= 13;
    }
    get commandsTakeWriteConcern() {
        return this.maxWireVersion >= 5;
    }
    get commandsTakeCollation() {
        return this.maxWireVersion >= 5;
    }
    constructor(hello){
        this.minWireVersion = hello.minWireVersion || 0;
        this.maxWireVersion = hello.maxWireVersion || 0;
    }
}
exports.ServerCapabilities = ServerCapabilities; //# sourceMappingURL=topology.js.map
}),
]);

//# sourceMappingURL=node_modules_mongodb_lib_sdam_d127f499._.js.map